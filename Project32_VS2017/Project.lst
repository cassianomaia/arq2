Microsoft (R) Macro Assembler Version 14.10.25019.0	    12/11/17 17:27:43
game.asm						     Page 1 - 1


				Include Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				IncludeLib winmm.lib

				;prototipo para a função do som
				PlaySound PROTO,
				        pszSound:PTR BYTE, 
				        hmod:DWORD, 
				        fdwSound:DWORD
						
						
 00000000			.data
				;Menu struct and vars
 00000000 00			menuctrl BYTE 0

 00000001 20 20 20 20 20	menu01  BYTE "              _________________________________________________  ",0
	   20 20 20 20 20
	   20 20 20 20 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 20
	   00
 00000043 20 20 20 20 20	menu02  BYTE "             | _  _ _  _ ____ ____    ____ ____ ____ ____ ____ | ",0
	   20 20 20 20 20
	   20 20 20 7C 20
	   5F 20 20 5F 20
	   5F 20 20 5F 20
	   5F 5F 5F 5F 20
	   5F 5F 5F 5F 20
	   20 20 20 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 5F 5F
	   5F 5F 20 7C 20
	   00
 00000085 20 20 20 20 20	menu03  BYTE "             | |__| |  | | __ |  |    |__/ |__| |    |___ |__/ | ",0
	   20 20 20 20 20
	   20 20 20 7C 20
	   7C 5F 5F 7C 20
	   7C 20 20 7C 20
	   7C 20 5F 5F 20
	   7C 20 20 7C 20
	   20 20 20 7C 5F
	   5F 2F 20 7C 5F
	   5F 7C 20 7C 20
	   20 20 20 7C 5F
	   5F 5F 20 7C 5F
	   5F 2F 20 7C 20
	   00
 000000C7 20 20 20 20 20	menu04  BYTE "             | |  | |__| |__] |__|    |  \ |  | |___ |___ |  \ | ",0
	   20 20 20 20 20
	   20 20 20 7C 20
	   7C 20 20 7C 20
	   7C 5F 5F 7C 20
	   7C 5F 5F 5D 20
	   7C 5F 5F 7C 20
	   20 20 20 7C 20
	   20 5C 20 7C 20
	   20 7C 20 7C 5F
	   5F 5F 20 7C 5F
	   5F 5F 20 7C 20
	   20 5C 20 7C 20
	   00
 00000109 20 20 20 20 20	menu05  BYTE "              _________________________________________________  ",0
	   20 20 20 20 20
	   20 20 20 20 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 5F 5F
	   5F 5F 5F 20 20
	   00
 0000014B 20 20 20 20 20	menu06  BYTE "                                   Start                         ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   53 74 61 72 74
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 0000018D 20 20 20 20 20	menu06h BYTE "                                 >>Start<<                       ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 3E 3E
	   53 74 61 72 74
	   3C 3C 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000001CF 20 20 20 20 20	menu07  BYTE "                                   Help                          ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   48 65 6C 70 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000211 20 20 20 20 20	menu07h BYTE "                                 >>Help<<                        ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 3E 3E
	   48 65 6C 70 3C
	   3C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000253 20 20 20 20 20	menu08  BYTE "                                   Exit                          ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   45 78 69 74 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000295 20 20 20 20 20	menu08h BYTE "                                 >>Exit<<                        ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 3E 3E
	   45 78 69 74 3C
	   3C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000002D7 20 20 20 20 20	menu09  BYTE "                   Alunos: Alisson Hayasi                        ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 41
	   6C 75 6E 6F 73
	   3A 20 41 6C 69
	   73 73 6F 6E 20
	   48 61 79 61 73
	   69 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000319 20 20 20 20 20	menu10  BYTE "                           Cassiano Maia                         ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 43 61 73
	   73 69 61 6E 6F
	   20 4D 61 69 61
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 0000035B 20 20 20 20 20	menu11  BYTE "                           Hugo Braga                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 48 75 67
	   6F 20 42 72 61
	   67 61 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 0000039D 20 20 20 20 20	menu12  BYTE "                    Prof.: Luciano Neris                         ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   50 72 6F 66 2E
	   3A 20 4C 75 63
	   69 61 6E 6F 20
	   4E 65 72 69 73
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000003DF 20 20 20 20 20	menu13  BYTE "               Disciplina: Lab. de Arq. e Org. de Computadores 2 ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   44 69 73 63 69
	   70 6C 69 6E 61
	   3A 20 4C 61 62
	   2E 20 64 65 20
	   41 72 71 2E 20
	   65 20 4F 72 67
	   2E 20 64 65 20
	   43 6F 6D 70 75
	   74 61 64 6F 72
	   65 73 20 32 20
	   00

				;Help struct and vars
 00000421 00			helpindex BYTE 0

 00000422 20 20 20 20 20	help00  BYTE "                 Movimento do carrinho: a - move para esquerda   ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 4D 6F 76
	   69 6D 65 6E 74
	   6F 20 64 6F 20
	   63 61 72 72 69
	   6E 68 6F 3A 20
	   61 20 2D 20 6D
	   6F 76 65 20 70
	   61 72 61 20 65
	   73 71 75 65 72
	   64 61 20 20 20
	   00
 00000464 20 20 20 20 20	help01  BYTE "                                        d - move para a direita  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   64 20 2D 20 6D
	   6F 76 65 20 70
	   61 72 61 20 61
	   20 64 69 72 65
	   69 74 61 20 20
	   00
 000004A6 20 20 20 20 20	help02  BYTE "                  A cada 50 pontos voce sobe de nivel, e o jogo  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 41 20
	   63 61 64 61 20
	   35 30 20 70 6F
	   6E 74 6F 73 20
	   76 6F 63 65 20
	   73 6F 62 65 20
	   64 65 20 6E 69
	   76 65 6C 2C 20
	   65 20 6F 20 6A
	   6F 67 6F 20 20
	   00
 000004E8 20 20 20 20 20	help03  BYTE "                   fica mais dificil. Nao bata o carrinho! :)    ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 66
	   69 63 61 20 6D
	   61 69 73 20 64
	   69 66 69 63 69
	   6C 2E 20 4E 61
	   6F 20 62 61 74
	   61 20 6F 20 63
	   61 72 72 69 6E
	   68 6F 21 20 3A
	   29 20 20 20 20
	   00
 0000052A 20 20 20 20 20	help04  BYTE "                                    Jogar                        ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 4A 6F 67 61
	   72 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 0000056C 20 20 20 20 20	help04h BYTE "                                  >>Jogar<<                      ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 3E
	   3E 4A 6F 67 61
	   72 3C 3C 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000005AE 20 20 20 20 20	help05  BYTE "                               Voltar ao menu                    ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 56 6F 6C 74
	   61 72 20 61 6F
	   20 6D 65 6E 75
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 000005F0 20 20 20 20 20	help05h BYTE "                             >>Voltar ao menu<<                  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 3E
	   3E 56 6F 6C 74
	   61 72 20 61 6F
	   20 6D 65 6E 75
	   3C 3C 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00

				;Lost screen struct
 00000632 20 20 20 20 20	lost00  BYTE "                        Voce colidiu com um carro :(             ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 56
	   6F 63 65 20 63
	   6F 6C 69 64 69
	   75 20 63 6F 6D
	   20 75 6D 20 63
	   61 72 72 6F 20
	   3A 28 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   00
 00000674 20 20 20 20 20	lost01  BYTE "                              Pontuacao:",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   50 6F 6E 74 75
	   61 63 61 6F 3A
	   00
 0000069D 20 20 20 20 20	lost02  BYTE "                         Nivel Atingido:",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   4E 69 76 65 6C
	   20 41 74 69 6E
	   67 69 64 6F 3A
	   00
 000006C6 20 20 20 20 20	lost03  BYTE "                    Pressione enter para voltar ao menu.         ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   50 72 65 73 73
	   69 6F 6E 65 20
	   65 6E 74 65 72
	   20 70 61 72 61
	   20 76 6F 6C 74
	   61 72 20 61 6F
	   20 6D 65 6E 75
	   2E 20 20 20 20
	   20 20 20 20 20
	   00


				;Game Struct and vars
 00000708 20 20 20 20 20	game000 BYTE "                    ###     ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   23 23 23 20 20
	   20 20 20 00
 00000725 20 20 20 20 20	game001 BYTE "                   #o###    ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 23
	   6F 23 23 23 20
	   20 20 20 00
 00000742 20 20 20 20 20	game002 BYTE "                 #####o###  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 23 23 23
	   23 23 6F 23 23
	   23 20 20 00
 0000075F 20 20 20 20 20	game003 BYTE "                #o#\#|#/### ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 23 6F 23 5C
	   23 7C 23 2F 23
	   23 23 20 00
 0000077C 20 20 20 20 20	game004 BYTE "                 ###\|/#o#  ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 23 23 23
	   5C 7C 2F 23 6F
	   23 20 20 00
 00000799 20 20 20 20 20	game005 BYTE "                    }|{     ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7D 7C 7B 20 20
	   20 20 20 00
 000007B6 20 20 20 20 20	game006 BYTE "                    }|{     ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7D 7C 7B 20 20
	   20 20 20 00
 000007D3 20 20 20 20 20	game007 BYTE "                    }|{     ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7D 7C 7B 20 20
	   20 20 20 00
 000007F0 20 20 20 20 20	game008 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 0000080D 20 20 20 20 20	game009 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 0000082A 20 20 20 20 20	game010 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000847 20 20 20 20 20	game011 BYTE "             ###            ",0
	   20 20 20 20 20
	   20 20 20 23 23
	   23 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000864 20 20 20 20 20	game012 BYTE "            #o###           ",0
	   20 20 20 20 20
	   20 20 23 6F 23
	   23 23 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000881 20 20 20 20 20	game013 BYTE "          #####o###         ",0
	   20 20 20 20 20
	   23 23 23 23 23
	   6F 23 23 23 20
	   20 20 20 20 20
	   20 20 20 00
 0000089E 20 20 20 20 20	game014 BYTE "         #o#\#|#/###        ",0
	   20 20 20 20 23
	   6F 23 5C 23 7C
	   23 2F 23 23 23
	   20 20 20 20 20
	   20 20 20 00
 000008BB 20 20 20 20 20	game015 BYTE "          ###\|/#o#         ",0
	   20 20 20 20 20
	   23 23 23 5C 7C
	   2F 23 6F 23 20
	   20 20 20 20 20
	   20 20 20 00
 000008D8 20 20 20 20 20	game016 BYTE "             }|{            ",0
	   20 20 20 20 20
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 000008F5 20 20 20 20 20	game017 BYTE "             }|{            ",0
	   20 20 20 20 20
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000912 20 20 20 20 20	game018 BYTE "             }|{            ",0
	   20 20 20 20 20
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 0000092F 20 20 20 20 20	game019 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 0000094C 20 20 20 20 20	game020 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000969 20 20 20 20 20	game021 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000986 20 20 20 20 20	game022 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 000009A3 20 20 20 20 20	game023 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 000009C0 20 20 20 20 20	game024 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 000009DD 20 20 20 20 20	game025 BYTE "                            ",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 000009FA 20 20 20 20 20	game026 BYTE "       ###                  ",0
	   20 20 23 23 23
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000A17 20 20 20 20 20	game027 BYTE "      #o###                 ",0
	   20 23 6F 23 23
	   23 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000A34 20 20 20 20 23	game028 BYTE "    #####o###               ",0
	   23 23 23 23 6F
	   23 23 23 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000A51 20 20 20 23 6F	game029 BYTE "   #o#\#|#/###              ",0
	   23 5C 23 7C 23
	   2F 23 23 23 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000A6E 20 20 20 20 23	game030 BYTE "    ###\|/#o#               ",0
	   23 23 5C 7C 2F
	   23 6F 23 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000A8B 20 20 20 20 20	game031 BYTE "       }|{                  ",0
	   20 20 7D 7C 7B
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000AA8 20 20 20 20 20	game032 BYTE "       }|{                  ",0
	   20 20 7D 7C 7B
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00
 00000AC5 20 20 20 20 20	game033 BYTE "       }|{                  ",0
	   20 20 7D 7C 7B
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 00

 00000AE2 00			carcontrol BYTE 0            ;controla a posição do carrinho na tela
 00000AE3 00000000		random_number DWORD 0        ;gera um numero randomico para onde vamos colocar o prox obstaculo
 00000AE7 00000000		obstaculo_index DWORD 0      ;indexa qual posição o obstaculo vai ficar
 00000AEB 00000000		obstaculo_counter DWORD 0    ;conta se já colocaram tres obstaculos na tela
 00000AEF 00000000		timer_obst DWORD 0           ;timer para contar 300ms(Periodo entre cada novo obstaculo)
 00000AF3 00000000		score DWORD 0				 ;salva a quantidade de pontos do player
 00000AF7 00000001		level DWORD 1				 ;salva o nivel em que o jogador está
 00000AFB 00000000		level_counter DWORD 0		 ;utilizado para contar quantos pontos fez em determinado lvl
 00000AFF 00000000		level_timer DWORD 0			 ;utilizado para definir o delay do level

				;esse grupo de strings nunca é mostrado, é utilizado somente para desenhar o proximo obstaculo a entrar no jogo
 00000B03 7C 20 20 20 20	game0 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000B2D 7C 20 20 20 20	game1 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000B57 7C 20 20 20 20	game2 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000B81 7C 20 20 20 20	game3 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00

				;strings onde o jogo realmente acontece
 00000BAB 7C 20 20 20 20	game100 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000BD5 7C 20 20 20 20	game101 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000BFF 7C 20 20 20 20	game102 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000C29 7C 20 20 20 20	game103 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000C53 7C 20 20 20 20	game104 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000C7D 7C 20 20 20 20	game105 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000CA7 7C 20 20 20 20	game106 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000CD1 7C 20 20 20 20	game107 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000CFB 7C 20 20 20 20	game108 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000D25 7C 20 20 20 20	game109 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000D4F 7C 20 20 20 20	game110 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000D79 7C 20 20 20 20	game111 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000DA3 7C 20 20 20 20	game112 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000DCD 7C 20 20 20 20	game113 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000DF7 7C 20 20 20 20	game114 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000E21 7C 20 20 20 20	game115 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000E4B 7C 20 20 20 20	game116 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000E75 7C 20 20 20 20	game117 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000E9F 7C 20 20 20 20	game118 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000EC9 7C 20 20 20 20	game119 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000EF3 7C 20 20 20 20	game120 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000F1D 7C 20 20 20 20	game121 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000F47 7C 20 20 20 20	game122 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000F71 7C 20 20 20 20	game123 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000F9B 7C 20 20 20 20	game124 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000FC5 7C 20 20 20 20	game125 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00000FEF 7C 20 20 20 20	game126 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00001019 7C 20 20 20 20	game127 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00001043 7C 20 20 20 20	game128 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 0000106D 7C 20 20 20 20	game129 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00001097 7C 20 20 20 20	game130 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 000010C1 7C 20 20 20 20	game131 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 000010EB 7C 20 20 20 20	game132 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00
 00001115 7C 20 20 20 20	game133 BYTE "|                   |                   |",0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   7C 00

 0000113F 20 20 20 20 20	game200 BYTE "        ###               ",13,10,0
	   20 20 20 23 23
	   23 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 0000115C 20 20 20 20 20	game201 BYTE "       #o###              ",13,10,0
	   20 20 23 6F 23
	   23 23 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00001179 20 20 20 20 20	game202 BYTE "     #####o###            ",13,10,0
	   23 23 23 23 23
	   6F 23 23 23 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00001196 20 20 20 20 23	game203 BYTE "    #o#\#|#/###           ",13,10,0
	   6F 23 5C 23 7C
	   23 2F 23 23 23
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 000011B3 20 20 20 20 20	game204 BYTE "     ###\|/#o#            ",13,10,0
	   23 23 23 5C 7C
	   2F 23 6F 23 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 000011D0 20 20 20 20 20	game205 BYTE "        }|{               ",13,10,0
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 000011ED 20 20 20 20 20	game206 BYTE "        }|{               ",13,10,0
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 0000120A 20 20 20 20 20	game207 BYTE "        }|{               ",13,10,0
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00001227 20 20 20 20 20	game208 BYTE "                          ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00001244 20 20 20 20 20	game209 BYTE "                          ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00001261 20 20 20 20 20	game210 BYTE "                          ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 0000127E 20 20 20 20 20	game211 BYTE "                  ###     ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 23 23
	   23 20 20 20 20
	   20 0D 0A 00
 0000129B 20 20 20 20 20	game212 BYTE "                 #o###    ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 23 6F 23
	   23 23 20 20 20
	   20 0D 0A 00
 000012B8 20 20 20 20 20	game213 BYTE "               #####o###  ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   23 23 23 23 23
	   6F 23 23 23 20
	   20 0D 0A 00
 000012D5 20 20 20 20 20	game214 BYTE "              #o#\#|#/### ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 23
	   6F 23 5C 23 7C
	   23 2F 23 23 23
	   20 0D 0A 00
 000012F2 20 20 20 20 20	game215 BYTE "               ###\|/#o#  ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   23 23 23 5C 7C
	   2F 23 6F 23 20
	   20 0D 0A 00
 0000130F 20 20 20 20 20	game216 BYTE "                  }|{     ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 0D 0A 00
 0000132C 20 20 20 20 20	game217 BYTE "                  }|{     ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 0D 0A 00
 00001349 20 20 20 20 20	game218 BYTE "                  }|{     ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 0D 0A 00
 00001366 20 20 20 20 20	game219 BYTE "                          ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00001383 20 20 20 20 20	game220 BYTE "        ###               ",13,10,0
	   20 20 20 23 23
	   23 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 000013A0 20 20 20 20 20	game221 BYTE "       #o###              ",13,10,0
	   20 20 23 6F 23
	   23 23 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 000013BD 20 20 20 20 20	game222 BYTE "     #####o###            ",13,10,0
	   23 23 23 23 23
	   6F 23 23 23 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 000013DA 20 20 20 20 23	game223 BYTE "    #o#\#|#/###           ",13,10,0
	   6F 23 5C 23 7C
	   23 2F 23 23 23
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 000013F7 20 20 20 20 20	game224 BYTE "     ###\|/#o#            ",13,10,0
	   23 23 23 5C 7C
	   2F 23 6F 23 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00001414 20 20 20 20 20	game225 BYTE "        }|{               ",13,10,0
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00001431 20 20 20 20 20	game226 BYTE "        }|{               ",13,10,0
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 0000144E 20 20 20 20 20	game227 BYTE "        }|{               ",13,10,0
	   20 20 20 7D 7C
	   7B 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 0000146B 20 20 20 20 20	game228 BYTE "                          ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 00001488 20 20 20 20 20	game229 BYTE "                          ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 000014A5 20 20 20 20 20	game230 BYTE "                          ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00
 000014C2 20 20 20 20 20	game231 BYTE "      Level:",0					;exibe o level na tela
	   20 4C 65 76 65
	   6C 3A 00
 000014CF 20 20 20 20 20	game232 BYTE "      Score:",0					;exibe o score na tela
	   20 53 63 6F 72
	   65 3A 00
 000014DC 20 20 20 20 20	game233 BYTE "                          ",13,10,0
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 0D 0A 00

				;variaveis para rodar o som do jogo
 000014F9 44 65 76 69 63	deviceConnect BYTE "DeviceConnect",0
	   65 43 6F 6E 6E
	   65 63 74 00
 00001507 00010000		SND_ALIAS    DWORD 00010000h
 0000150B 00040005		SND_RESOURCE DWORD 00040005h
 0000150F 00020009		SND_FILENAME DWORD 00020009h
 00001513 63 3A 5C 5C 4C	file BYTE "c:\\LabArq2\MASM\music.wav",0
	   61 62 41 72 71
	   32 5C 4D 41 53
	   4D 5C 6D 75 73
	   69 63 2E 77 61
	   76 00

 00000000			.code
 00000000			main PROC
				;instruções para tocar a música
					INVOKE PlaySound, OFFSET deviceConnect, NULL, SND_ALIAS
 00000000  FF 35 00001507 R *	    push   SND_ALIAS
 00000006  6A 00	   *	    push   +000000000h
 00000008  68 000014F9 R   *	    push   dword  ptr OFFSET FLAT: deviceConnect
 0000000D  E8 00000000 E   *	    call   PlaySound
				    INVOKE PlaySound, OFFSET file, NULL, SND_FILENAME
 00000012  FF 35 0000150F R *	    push   SND_FILENAME
 00000018  6A 00	   *	    push   +000000000h
 0000001A  68 00001513 R   *	    push   dword  ptr OFFSET FLAT: file
 0000001F  E8 00000000 E   *	    call   PlaySound
					
				;Estrutura do menu principal
 00000024			Main_Menu:
 00000024  E8 00000287			call draw_menu
					;instruções para movimento do menu
 00000029  B8 00000032			mov eax, 50
 0000002E  E8 00000000 E		call Delay
 00000033  E8 00000000 E		call ReadKey
 00000038  74 5D			jz exitcmp
 0000003A  66| 83 FA 1B			cmp dx, VK_ESCAPE
 0000003E  0F 84 00000265		je finish
 00000044  66| 83 FA 0D			cmp dx, VK_RETURN ;verifica se o jogador pressionou enter, se sim
 00000048  75 23			jne nextcmp		  ;leva para a opção indicada (selecionada via menuctrl,
 0000004A  80 3D 00000000 R		cmp menuctrl, 0	  ;que é a variavel para controlar o menu)
	   00
 00000051  74 50			je gameloop_start
 00000053  80 3D 00000000 R		cmp menuctrl, 1
	   01
 0000005A  0F 84 000001A2		je helploop
 00000060  80 3D 00000000 R		cmp menuctrl, 2
	   02
 00000067  0F 84 0000023C		je finish
				;instruções para incrementar ou decrementar a variavel de controle do menu
 0000006D			nextcmp:
 0000006D  3C 77			cmp al, 119     ;compara se pressionou w
 0000006F  75 12			jne elsecmp		;se não, pula para a proxima comparação
 00000071  80 3D 00000000 R		cmp menuctrl, 0 ;decrementa somente se nao for zero
	   00
 00000078  74 1D			je  exitcmp
 0000007A  80 05 00000000 R		add menuctrl, -1 
	   FF
 00000081  EB 14			jmp exitcmp
 00000083			elsecmp:
 00000083  3C 73			cmp al, 115     ;compara se pressionou s
 00000085  75 10			jne exitcmp		;se não, pula para o fim, dhamando um delay e reiniciando o loop
 00000087  80 3D 00000000 R		cmp menuctrl, 2 ;incrementa somente se não for 2
	   02
 0000008E  74 07			je exitcmp
 00000090  80 05 00000000 R		add menuctrl, 1
	   01
 00000097			exitcmp:
 00000097  B8 00000032			mov eax, 50
 0000009C  E8 00000000 E		call Delay
 000000A1  EB 81			jmp Main_Menu
				;Fim da estrutura do menu principal
					
				;Inicio do gameloop
 000000A3			gameloop_start:
					;setando as variaveis para começar o jogo
 000000A3  E8 00000000 E		call Clrscr
 000000A8  E8 00000D79			call draw_game_init
 000000AD  C7 05 00000AF3 R		mov score, 0
	   00000000
 000000B7  C7 05 00000AF7 R		mov level, 1
	   00000001
 000000C1  C7 05 00000AFB R		mov level_counter, 0
	   00000000
 000000CB  C7 05 00000AFF R		mov level_timer, 250
	   000000FA
					;loop principal do jogo
 000000D5			gameloop_inner:
 000000D5  E8 000004EE			call draw_player
 000000DA  B8 00000032			mov eax, 50
 000000DF  E8 00000000 E		call Delay
 000000E4  E8 00000000 E		call ReadKey
 000000E9  74 34			jz exitcmp_g
 000000EB  66| 83 FA 1B			cmp dx, VK_ESCAPE
 000000EF  0F 84 000001B4		je finish
										;comparações para movimentação do player
 000000F5  3C 61			cmp al, 97			;se apertou a, move para a esquerda
 000000F7  75 12			jne elsecmp_g
 000000F9  80 3D 00000AE2 R		cmp carcontrol, 0	;dheca se nao está na borda esquerda
	   00
 00000100  74 1D			je  exitcmp_g
 00000102  80 05 00000AE2 R		add carcontrol, -1	;decrementa a posicao se nao estiver na borda esquerda
	   FF
 00000109  EB 14			jmp exitcmp_g
 0000010B			elsecmp_g:
 0000010B  3C 64			cmp al, 100			;se apertou s, move para a direita
 0000010D  75 10			jne exitcmp_g
 0000010F  80 3D 00000AE2 R		cmp carcontrol , 3  ;dheca se não está na borda direita
	   03
 00000116  74 07			je exitcmp_g
 00000118  80 05 00000AE2 R		add carcontrol, 1	;incrementa a posicao se nao estiver na borda direita
	   01
 0000011F			exitcmp_g:
 0000011F  A1 00000AFF R		mov eax, level_timer
 00000124  39 05 00000AEF R		cmp timer_obst, eax ;timer_obst conta o tempo até ser igual a level_timer,
 0000012A  75 4C			jne exit_timer		;e quando igual, permite que novos obstaculos surjam no jogo
 0000012C  E8 0000073A			call draw_obst
 00000131  E8 0000088E			call draw_copy
 00000136  83 05 00000AF3 R		add score, 1
	   01
 0000013D  83 05 00000AFB R		add level_counter, 1
	   01
 00000144  83 3D 00000AFB R		cmp level_counter, 50 ;se o jogador atingir 50 pontos em um level, vai para o proximo level,
	   32
 0000014B  75 21			jne finish_counter	  ;deixando o jogo 50ms mais rapido
 0000014D  83 3D 00000AFF R		cmp level_timer, 100
	   64
 00000154  74 18			je finish_counter
 00000156  83 05 00000AF7 R		add level, 1		  ;incrementa o indice para subir de nivel
	   01
 0000015D  C7 05 00000AFB R		mov level_counter, 0  ;zera o contador de pontos no nivel
	   00000000
 00000167  83 2D 00000AFF R		sub level_timer, 50   ;subtrai 50 do delay de entrada dos obstaculos
	   32
 0000016E			finish_counter:
 0000016E  C7 05 00000AEF R		mov timer_obst, 0
	   00000000
 00000178			exit_timer:
 00000178  E8 000009F8			call draw_game  ;função para desenhar a tela do jogo
				; dhecagem da colisão nas 4 posições possiveis
 0000017D  B9 00001097 R		mov ecx, OFFSET game130
 00000182  B8 00001043 R		mov eax, OFFSET game128
 00000187  83 C1 05			add ecx, 5
 0000018A  83 C0 05			add eax, 5
 0000018D  8A 11			mov dl, BYTE PTR [ecx]
 0000018F  8A 18			mov bl, BYTE PTR [eax]
 00000191  80 FA CD			cmp dl, 205
 00000194  75 09			jne colision2
 00000196  80 FB CD			cmp bl, 205
 00000199  0F 84 000000D9		je lost_screen
 0000019F			colision2:
 0000019F  83 C1 09			add ecx, 9
 000001A2  83 C0 09			add eax, 9
 000001A5  8A 11			mov dl, BYTE PTR [ecx]
 000001A7  8A 18			mov bl, BYTE PTR [eax]
 000001A9  80 FA CD			cmp dl, 205
 000001AC  75 09			jne colision3
 000001AE  80 FB CD			cmp bl, 205
 000001B1  0F 84 000000C1		je lost_screen
 000001B7			colision3:
 000001B7  83 C1 0B			add ecx, 11
 000001BA  83 C0 0B			add eax, 11
 000001BD  8A 11			mov dl, BYTE PTR [ecx]
 000001BF  8A 18			mov bl, BYTE PTR [eax]
 000001C1  80 FA CD			cmp dl, 205
 000001C4  75 09			jne colision4
 000001C6  80 FB CD			cmp bl, 205
 000001C9  0F 84 000000A9		je lost_screen
 000001CF			colision4:
 000001CF  83 C1 09			add ecx, 9
 000001D2  83 C0 09			add eax, 9
 000001D5  8A 11			mov dl, BYTE PTR [ecx]
 000001D7  8A 18			mov bl, BYTE PTR [eax]
 000001D9  80 FA CD			cmp dl, 205
 000001DC  75 09			jne end_colision
 000001DE  80 FB CD			cmp bl, 205
 000001E1  0F 84 00000091		je lost_screen
 000001E7			end_colision:
 000001E7  B8 00000032			mov eax, 50
 000001EC  E8 00000000 E		call Delay 
 000001F1  E8 0000097F			call draw_game
 000001F6  83 05 00000AEF R		add timer_obst, 50 ;adciona 50ms a contagem para o proximo obstaculo
	   32
 000001FD  E9 FFFFFED3			jmp gameloop_inner ;retorna ao começo do loop
				;fim do gameloop

				;loop para a tela help
 00000202			helploop:
 00000202  E8 0000025A			call draw_help
 00000207  B8 00000032			mov eax, 50
 0000020C  E8 00000000 E		call Delay
 00000211  E8 00000000 E		call ReadKey
 00000216  74 EA			jz helploop
 00000218  66| 83 FA 0D			cmp dx, VK_RETURN
 0000021C  75 1A			jne second_cmp
 0000021E  80 3D 00000421 R		cmp helpindex, 0
	   00
 00000225  0F 84 FFFFFE78		je gameloop_start
 0000022B  80 3D 00000421 R		cmp helpindex, 1
	   01
 00000232  0F 84 FFFFFDEC		je Main_Menu
 00000238			second_cmp:
 00000238  3C 77			cmp al, 119
 0000023A  75 1C			jne third_cmp
 0000023C  B8 00000032			mov eax, 50
 00000241  E8 00000000 E		call Delay
 00000246  80 3D 00000421 R		cmp helpindex, 0
	   00
 0000024D  74 B3			je  helploop
 0000024F  80 05 00000421 R		add helpindex, -1
	   FF
 00000256  EB AA			jmp helploop
 00000258			third_cmp:
 00000258  3C 73			cmp al, 115
 0000025A  75 A6			jne helploop
 0000025C  B8 00000032			mov eax, 50
 00000261  E8 00000000 E		call Delay
 00000266  80 3D 00000421 R		cmp helpindex , 1
	   01
 0000026D  74 93			je helploop
 0000026F  80 05 00000421 R		add helpindex, 1
	   01
 00000276  EB 8A			jmp helploop
				;fim do loop de help

				;tela que informa que o jogador perdeu
 00000278			lost_screen:
 00000278  E8 000002FD			call clear_game	;limpa a matriz do jogo, para que caso o jogador jogue de novo tudo esteja certo
 0000027D  B8 00000032			mov eax, 50
 00000282  E8 00000000 E		call Delay
 00000287  E8 0000119F			call draw_lost
 0000028C  B8 00000032			mov eax, 50
 00000291  E8 00000000 E		call Delay
 00000296  E8 00000000 E		call ReadKey
 0000029B  74 DB			jz lost_screen
 0000029D  66| 83 FA 0D			cmp dx, VK_RETURN ;se apertar enter retorna ao menu principal
 000002A1  0F 84 FFFFFD7D		je Main_Menu
 000002A7  EB CF			jmp lost_screen
				;fim da tela de perdeu

				;ponto de saida do programa
 000002A9			Finish:
					exit
 000002A9  6A 00	   *	    push   +000000000h
 000002AB  E8 00000000 E   *	    call   ExitProcess
 000002B0			main ENDP

				;função que imprime no console o menu principal do jogo
 000002B0			draw_menu PROC
 000002B0  E8 00000000 E		call Clrscr
 000002B5  E8 00000000 E		call Crlf
 000002BA  B8 00000003			mov  eax,cyan+(black*16)
 000002BF  E8 00000000 E	    call SetTextColor
 000002C4  BA 00000001 R		mov  edx,OFFSET menu01
 000002C9  E8 00000000 E	    call WriteString
 000002CE  E8 00000000 E		call Crlf
 000002D3  BA 00000043 R		mov  edx,OFFSET menu02
 000002D8  E8 00000000 E	    call WriteString
 000002DD  E8 00000000 E		call Crlf
 000002E2  BA 00000085 R		mov  edx,OFFSET menu03
 000002E7  E8 00000000 E	    call WriteString
 000002EC  E8 00000000 E		call Crlf
 000002F1  BA 000000C7 R		mov  edx,OFFSET menu04
 000002F6  E8 00000000 E	    call WriteString
 000002FB  E8 00000000 E		call Crlf
 00000300  BA 00000109 R		mov edx, OFFSET menu05
 00000305  E8 00000000 E		call WriteString
 0000030A  B8 0000000F			mov  eax,white+(black*16)
 0000030F  E8 00000000 E	    call SetTextColor
 00000314  E8 00000000 E		call Crlf
 00000319  E8 00000000 E		call Crlf
 0000031E  E8 00000000 E		call Crlf
 00000323  80 3D 00000000 R		cmp menuctrl, 0
	   00
 0000032A  75 41			jne Menu1
 0000032C  B8 0000000E			mov  eax,yellow+(black*16)
 00000331  E8 00000000 E	    call SetTextColor
 00000336  BA 0000018D R		mov edx, OFFSET menu06h
 0000033B  E8 00000000 E		call WriteString
 00000340  B8 0000000F			mov  eax,white+(black*16)
 00000345  E8 00000000 E	    call SetTextColor
 0000034A  E8 00000000 E		call Crlf
 0000034F  BA 000001CF R		mov  edx,OFFSET menu07
 00000354  E8 00000000 E	    call WriteString
 00000359  E8 00000000 E		call Crlf
 0000035E  BA 00000253 R		mov  edx,OFFSET menu08
 00000363  E8 00000000 E	    call WriteString
 00000368  E8 00000000 E		call Crlf
 0000036D			Menu1:
 0000036D  80 3D 00000000 R		cmp menuctrl, 1
	   01
 00000374  75 41			jne menu2
 00000376  BA 0000014B R		mov edx, OFFSET menu06
 0000037B  E8 00000000 E		call WriteString
 00000380  E8 00000000 E		call Crlf
 00000385  B8 0000000E			mov  eax,yellow+(black*16)
 0000038A  E8 00000000 E	    call SetTextColor
 0000038F  BA 00000211 R		mov  edx,OFFSET menu07h
 00000394  E8 00000000 E	    call WriteString
 00000399  B8 0000000F			mov  eax,white+(black*16)
 0000039E  E8 00000000 E	    call SetTextColor
 000003A3  E8 00000000 E		call Crlf
 000003A8  BA 00000253 R		mov  edx,OFFSET menu08
 000003AD  E8 00000000 E	    call WriteString
 000003B2  E8 00000000 E		call Crlf
 000003B7			Menu2:
 000003B7  80 3D 00000000 R		cmp menuctrl, 2
	   02
 000003BE  75 41			jne exit_draw_menu
 000003C0  BA 0000014B R		mov edx, OFFSET menu06
 000003C5  E8 00000000 E		call WriteString
 000003CA  E8 00000000 E		call Crlf
 000003CF  BA 000001CF R		mov  edx,OFFSET menu07
 000003D4  E8 00000000 E	    call WriteString
 000003D9  E8 00000000 E		call Crlf
 000003DE  B8 0000000E			mov  eax,yellow+(black*16)
 000003E3  E8 00000000 E	    call SetTextColor
 000003E8  BA 00000295 R		mov  edx,OFFSET menu08h
 000003ED  E8 00000000 E	    call WriteString
 000003F2  B8 0000000F			mov  eax,white+(black*16)
 000003F7  E8 00000000 E	    call SetTextColor
 000003FC  E8 00000000 E		call Crlf
 00000401			exit_draw_menu:
 00000401  E8 00000000 E		call Crlf
 00000406  E8 00000000 E		call Crlf
 0000040B  E8 00000000 E		call Crlf
 00000410  E8 00000000 E		Call Crlf
 00000415  BA 000002D7 R		mov  edx,OFFSET menu09
 0000041A  E8 00000000 E	    call WriteString
 0000041F  E8 00000000 E		call Crlf
 00000424  BA 00000319 R		mov  edx,OFFSET menu10
 00000429  E8 00000000 E	    call WriteString
 0000042E  E8 00000000 E		call Crlf
 00000433  BA 0000035B R		mov  edx,OFFSET menu11
 00000438  E8 00000000 E	    call WriteString
 0000043D  E8 00000000 E		call Crlf
 00000442  BA 0000039D R		mov  edx,OFFSET menu12
 00000447  E8 00000000 E	    call WriteString
 0000044C  E8 00000000 E		call Crlf
 00000451  BA 000003DF R		mov  edx,OFFSET menu13
 00000456  E8 00000000 E	    call WriteString
 0000045B  E8 00000000 E		call Crlf
 00000460  C3				ret
 00000461			draw_menu ENDP

				;função que imprime no console a tela de ajuda do jogo
 00000461			draw_help PROC
 00000461  E8 00000000 E		call Clrscr
 00000466  E8 00000000 E		call Crlf
 0000046B  B8 00000003			mov  eax,cyan+(black*16)
 00000470  E8 00000000 E	    call SetTextColor
 00000475  BA 00000001 R		mov  edx,OFFSET menu01
 0000047A  E8 00000000 E	    call WriteString
 0000047F  E8 00000000 E		call Crlf
 00000484  BA 00000043 R		mov  edx,OFFSET menu02
 00000489  E8 00000000 E	    call WriteString
 0000048E  E8 00000000 E		call Crlf
 00000493  BA 00000085 R		mov  edx,OFFSET menu03
 00000498  E8 00000000 E	    call WriteString
 0000049D  E8 00000000 E		call Crlf
 000004A2  BA 000000C7 R		mov  edx,OFFSET menu04
 000004A7  E8 00000000 E	    call WriteString
 000004AC  E8 00000000 E		call Crlf
 000004B1  BA 00000109 R		mov edx, OFFSET menu05
 000004B6  E8 00000000 E		call WriteString
 000004BB  B8 0000000F			mov  eax,white+(black*16)
 000004C0  E8 00000000 E	    call SetTextColor
 000004C5  E8 00000000 E		call Crlf
 000004CA  E8 00000000 E		call Crlf
 000004CF  E8 00000000 E		call Crlf
 000004D4  BA 00000422 R		mov edx, OFFSET help00
 000004D9  E8 00000000 E		call WriteString
 000004DE  E8 00000000 E		call Crlf
 000004E3  BA 00000464 R	mov  edx,OFFSET help01
 000004E8  E8 00000000 E	    call WriteString
 000004ED  E8 00000000 E		call Crlf
 000004F2  BA 000004A6 R		mov  edx,OFFSET help02
 000004F7  E8 00000000 E	    call WriteString
 000004FC  E8 00000000 E		call Crlf
 00000501  BA 000004E8 R		mov  edx,OFFSET help03
 00000506  E8 00000000 E	    call WriteString
 0000050B  E8 00000000 E		call Crlf
 00000510  E8 00000000 E		call Crlf
 00000515  80 3D 00000421 R		cmp helpindex, 0
	   00
 0000051C  75 2E			jne helpmenu2
 0000051E  B8 0000000E			mov  eax,yellow+(black*16)
 00000523  E8 00000000 E	    call SetTextColor
 00000528  BA 0000056C R		mov  edx,OFFSET help04h
 0000052D  E8 00000000 E	    call WriteString
 00000532  B8 0000000F			mov  eax,white+(black*16)
 00000537  E8 00000000 E	    call SetTextColor
 0000053C  E8 00000000 E		call Crlf
 00000541  BA 000005AE R		mov  edx,OFFSET help05
 00000546  E8 00000000 E	    call WriteString
 0000054B  C3				ret
 0000054C			helpmenu2:
 0000054C  BA 0000052A R		mov  edx,OFFSET help04
 00000551  E8 00000000 E	    call WriteString
 00000556  E8 00000000 E		call Crlf
 0000055B  B8 0000000E			mov  eax,yellow+(black*16)
 00000560  E8 00000000 E	    call SetTextColor
 00000565  BA 000005F0 R		mov  edx,OFFSET help05h
 0000056A  E8 00000000 E	    call WriteString
 0000056F  B8 0000000F			mov  eax,white+(black*16)
 00000574  E8 00000000 E	    call SetTextColor
 00000579  C3				ret
 0000057A			draw_help ENDP

				;função que remove todos os obstaculos das pistas
 0000057A			clear_game PROC
 0000057A  FC				cld
 0000057B  B9 0000002A			mov ecx, LENGTHOF game104
 00000580  BE 00000C53 R		mov esi, OFFSET game104
 00000585  BF 00000B03 R		mov edi, OFFSET game0
 0000058A  F3/ A4			rep movsb
 0000058C  FC				cld
 0000058D  B9 0000002A			mov ecx, LENGTHOF game104
 00000592  BE 00000C53 R		mov esi, OFFSET game104
 00000597  BF 00000B2D R		mov edi, OFFSET game1
 0000059C  F3/ A4			rep movsb
 0000059E  FC				cld
 0000059F  B9 0000002A			mov ecx, LENGTHOF game104
 000005A4  BE 00000C53 R		mov esi, OFFSET game104
 000005A9  BF 00000B57 R		mov edi, OFFSET game2
 000005AE  F3/ A4			rep movsb
 000005B0  FC				cld
 000005B1  B9 0000002A			mov ecx, LENGTHOF game104
 000005B6  BE 00000C53 R		mov esi, OFFSET game104
 000005BB  BF 00000B81 R		mov edi, OFFSET game3
 000005C0  F3/ A4			rep movsb
 000005C2  E8 000003FD			call draw_copy
 000005C7  C3				ret
 000005C8			clear_game ENDP

				;função que desenha o carrinho do jogador, na posição marcada pela variavel carcontrol
 000005C8			draw_player PROC
 000005C8  FC				cld
 000005C9  B9 0000002A			mov ecx, LENGTHOF game104
 000005CE  BE 00000C53 R		mov esi, OFFSET game104
 000005D3  BF 00001097 R		mov edi, OFFSET game130
 000005D8  F3/ A4			rep movsb
 000005DA  FC				cld
 000005DB  B9 0000002A			mov ecx, LENGTHOF game104
 000005E0  BE 00000C53 R		mov esi, OFFSET game104
 000005E5  BF 000010C1 R		mov edi, OFFSET game131
 000005EA  F3/ A4			rep movsb
 000005EC  FC				cld
 000005ED  B9 0000002A			mov ecx, LENGTHOF game104
 000005F2  BE 00000C53 R		mov esi, OFFSET game104
 000005F7  BF 000010EB R		mov edi, OFFSET game132
 000005FC  F3/ A4			rep movsb
 000005FE  FC				cld
 000005FF  B9 0000002A			mov ecx, LENGTHOF game104
 00000604  BE 00000C53 R		mov esi, OFFSET game104
 00000609  BF 00001115 R		mov edi, OFFSET game133
 0000060E  F3/ A4			rep movsb
					
 00000610  B9 00001097 R		mov ecx, OFFSET game130
 00000615  80 3D 00000AE2 R		cmp carcontrol, 0
	   00
 0000061C  0F 85 00000087		jne pos1
 00000622  BB 000000CD			mov ebx, 205
 00000627  83 C1 05			add ecx, 5
 0000062A  88 19			mov BYTE PTR [ecx], bl
 0000062C  BB 000000C9			mov ebx, 201
 00000631  83 C1 FF			add ecx, -1
 00000634  88 19			mov BYTE PTR [ecx], bl
 00000636  BB 000000BB			mov ebx, 187
 0000063B  83 C1 02			add ecx, 2
 0000063E  88 19			mov BYTE PTR [ecx], bl
 00000640  B9 000010C1 R		mov ecx, OFFSET game131
 00000645  BB 00000048			mov ebx, 72
 0000064A  83 C1 05			add ecx, 5
 0000064D  88 19			mov BYTE PTR [ecx], bl
 0000064F  BB 000000BA			mov ebx, 186
 00000654  83 C1 FF			add ecx, -1
 00000657  88 19			mov BYTE PTR [ecx], bl
 00000659  BB 000000BA			mov ebx, 186
 0000065E  83 C1 02			add ecx, 2
 00000661  88 19			mov BYTE PTR [ecx], bl
 00000663  B9 000010EB R		mov ecx, OFFSET game132
 00000668  BB 000000CD			mov ebx, 205
 0000066D  83 C1 05			add ecx, 5
 00000670  88 19			mov BYTE PTR [ecx], bl
 00000672  BB 000000CC			mov ebx, 204
 00000677  83 C1 FF			add ecx, -1
 0000067A  88 19			mov BYTE PTR [ecx], bl
 0000067C  BB 000000B9			mov ebx, 185
 00000681  83 C1 02			add ecx, 2
 00000684  88 19			mov BYTE PTR [ecx], bl
 00000686  B9 00001115 R		mov ecx, OFFSET game133
 0000068B  BB 000000CD			mov ebx, 205
 00000690  83 C1 05			add ecx, 5
 00000693  88 19			mov BYTE PTR [ecx], bl
 00000695  BB 000000C8			mov ebx, 200
 0000069A  83 C1 FF			add ecx, -1
 0000069D  88 19			mov BYTE PTR [ecx], bl
 0000069F  BB 000000BC			mov ebx, 188
 000006A4  83 C1 02			add ecx, 2
 000006A7  88 19			mov BYTE PTR [ecx], bl
					
 000006A9			pos1:
 000006A9  80 3D 00000AE2 R		cmp carcontrol, 1
	   01
 000006B0  0F 85 0000008C		jne pos2
 000006B6  B9 00001097 R		mov ecx, OFFSET game130
 000006BB  BB 000000CD			mov ebx, 205
 000006C0  83 C1 0E			add ecx, 14
 000006C3  88 19			mov BYTE PTR [ecx], bl
 000006C5  BB 000000C9			mov ebx, 201
 000006CA  83 C1 FF			add ecx, -1
 000006CD  88 19			mov BYTE PTR [ecx], bl
 000006CF  BB 000000BB			mov ebx, 187
 000006D4  83 C1 02			add ecx, 2
 000006D7  88 19			mov BYTE PTR [ecx], bl
 000006D9  B9 000010C1 R		mov ecx, OFFSET game131
 000006DE  BB 00000048			mov ebx, 72
 000006E3  83 C1 0E			add ecx, 14
 000006E6  88 19			mov BYTE PTR [ecx], bl
 000006E8  BB 000000BA			mov ebx, 186
 000006ED  83 C1 FF			add ecx, -1
 000006F0  88 19			mov BYTE PTR [ecx], bl
 000006F2  BB 000000BA			mov ebx, 186
 000006F7  83 C1 02			add ecx, 2
 000006FA  88 19			mov BYTE PTR [ecx], bl
 000006FC  B9 000010EB R		mov ecx, OFFSET game132
 00000701  BB 000000CD			mov ebx, 205
 00000706  83 C1 0E			add ecx, 14
 00000709  88 19			mov BYTE PTR [ecx], bl
 0000070B  BB 000000CC			mov ebx, 204
 00000710  83 C1 FF			add ecx, -1
 00000713  88 19			mov BYTE PTR [ecx], bl
 00000715  BB 000000B9			mov ebx, 185
 0000071A  83 C1 02			add ecx, 2
 0000071D  88 19			mov BYTE PTR [ecx], bl
 0000071F  B9 00001115 R		mov ecx, OFFSET game133
 00000724  BB 000000CD			mov ebx, 205
 00000729  83 C1 0E			add ecx, 14
 0000072C  88 19			mov BYTE PTR [ecx], bl
 0000072E  BB 000000C8			mov ebx, 200
 00000733  83 C1 FF			add ecx, -1
 00000736  88 19			mov BYTE PTR [ecx], bl
 00000738  BB 000000BC			mov ebx, 188
 0000073D  83 C1 02			add ecx, 2
 00000740  88 19			mov BYTE PTR [ecx], bl
					
 00000742			pos2:
 00000742  80 3D 00000AE2 R		cmp carcontrol, 2
	   02
 00000749  0F 85 00000087		jne pos3
 0000074F  BB 000000CD			mov ebx, 205
 00000754  83 C1 19			add ecx, 25
 00000757  88 19			mov BYTE PTR [ecx], bl
 00000759  BB 000000C9			mov ebx, 201
 0000075E  83 C1 FF			add ecx, -1
 00000761  88 19			mov BYTE PTR [ecx], bl
 00000763  BB 000000BB			mov ebx, 187
 00000768  83 C1 02			add ecx, 2
 0000076B  88 19			mov BYTE PTR [ecx], bl
 0000076D  B9 000010C1 R		mov ecx, OFFSET game131
 00000772  BB 00000048			mov ebx, 72
 00000777  83 C1 19			add ecx, 25
 0000077A  88 19			mov BYTE PTR [ecx], bl
 0000077C  BB 000000BA			mov ebx, 186
 00000781  83 C1 FF			add ecx, -1
 00000784  88 19			mov BYTE PTR [ecx], bl
 00000786  BB 000000BA			mov ebx, 186
 0000078B  83 C1 02			add ecx, 2
 0000078E  88 19			mov BYTE PTR [ecx], bl
 00000790  B9 000010EB R		mov ecx, OFFSET game132
 00000795  BB 000000CD			mov ebx, 205
 0000079A  83 C1 19			add ecx, 25
 0000079D  88 19			mov BYTE PTR [ecx], bl
 0000079F  BB 000000CC			mov ebx, 204
 000007A4  83 C1 FF			add ecx, -1
 000007A7  88 19			mov BYTE PTR [ecx], bl
 000007A9  BB 000000B9			mov ebx, 185
 000007AE  83 C1 02			add ecx, 2
 000007B1  88 19			mov BYTE PTR [ecx], bl
 000007B3  B9 00001115 R		mov ecx, OFFSET game133
 000007B8  BB 000000CD			mov ebx, 205
 000007BD  83 C1 19			add ecx, 25
 000007C0  88 19			mov BYTE PTR [ecx], bl
 000007C2  BB 000000C8			mov ebx, 200
 000007C7  83 C1 FF			add ecx, -1
 000007CA  88 19			mov BYTE PTR [ecx], bl
 000007CC  BB 000000BC			mov ebx, 188
 000007D1  83 C1 02			add ecx, 2
 000007D4  88 19			mov BYTE PTR [ecx], bl
 000007D6			pos3:
 000007D6  80 3D 00000AE2 R		cmp carcontrol, 3
	   03
 000007DD  0F 85 00000087		jne end_draw
 000007E3  BB 000000CD			mov ebx, 205
 000007E8  83 C1 22			add ecx, 34
 000007EB  88 19			mov BYTE PTR [ecx], bl
 000007ED  BB 000000C9			mov ebx, 201
 000007F2  83 C1 FF			add ecx, -1
 000007F5  88 19			mov BYTE PTR [ecx], bl
 000007F7  BB 000000BB			mov ebx, 187
 000007FC  83 C1 02			add ecx, 2
 000007FF  88 19			mov BYTE PTR [ecx], bl
 00000801  B9 000010C1 R		mov ecx, OFFSET game131
 00000806  BB 00000048			mov ebx, 72
 0000080B  83 C1 22			add ecx, 34
 0000080E  88 19			mov BYTE PTR [ecx], bl
 00000810  BB 000000BA			mov ebx, 186
 00000815  83 C1 FF			add ecx, -1
 00000818  88 19			mov BYTE PTR [ecx], bl
 0000081A  BB 000000BA			mov ebx, 186
 0000081F  83 C1 02			add ecx, 2
 00000822  88 19			mov BYTE PTR [ecx], bl
 00000824  B9 000010EB R		mov ecx, OFFSET game132
 00000829  BB 000000CD			mov ebx, 205
 0000082E  83 C1 22			add ecx, 34
 00000831  88 19			mov BYTE PTR [ecx], bl
 00000833  BB 000000CC			mov ebx, 204
 00000838  83 C1 FF			add ecx, -1
 0000083B  88 19			mov BYTE PTR [ecx], bl
 0000083D  BB 000000B9			mov ebx, 185
 00000842  83 C1 02			add ecx, 2
 00000845  88 19			mov BYTE PTR [ecx], bl
 00000847  B9 00001115 R		mov ecx, OFFSET game133
 0000084C  BB 000000CD			mov ebx, 205
 00000851  83 C1 22			add ecx, 34
 00000854  88 19			mov BYTE PTR [ecx], bl
 00000856  BB 000000C8			mov ebx, 200
 0000085B  83 C1 FF			add ecx, -1
 0000085E  88 19			mov BYTE PTR [ecx], bl
 00000860  BB 000000BC			mov ebx, 188
 00000865  83 C1 02			add ecx, 2
 00000868  88 19			mov BYTE PTR [ecx], bl
 0000086A			end_draw:
 0000086A  C3				ret
 0000086B			draw_player ENDP

				;função que desenha um obstaculo em uma posição aleatoria das quatro pistas possiveis
 0000086B			draw_obst PROC
 0000086B  83 05 00000AEB R		add obstaculo_counter, 1
	   01
 00000872  FC				cld
 00000873  B9 0000002A			mov ecx, LENGTHOF game104
 00000878  BE 00000C53 R		mov esi, OFFSET game104
 0000087D  BF 00000B03 R		mov edi, OFFSET game0
 00000882  F3/ A4			rep movsb
 00000884  FC				cld
 00000885  B9 0000002A			mov ecx, LENGTHOF game104
 0000088A  BE 00000C53 R		mov esi, OFFSET game104
 0000088F  BF 00000B2D R		mov edi, OFFSET game1
 00000894  F3/ A4			rep movsb
 00000896  FC				cld
 00000897  B9 0000002A			mov ecx, LENGTHOF game104
 0000089C  BE 00000C53 R		mov esi, OFFSET game104
 000008A1  BF 00000B57 R		mov edi, OFFSET game2
 000008A6  F3/ A4			rep movsb
 000008A8  FC				cld
 000008A9  B9 0000002A			mov ecx, LENGTHOF game104
 000008AE  BE 00000C53 R		mov esi, OFFSET game104
 000008B3  BF 00000B81 R		mov edi, OFFSET game3
 000008B8  F3/ A4			rep movsb
					
 000008BA  83 3D 00000AEB R		cmp obstaculo_counter, 4
	   04
 000008C1  0F 84 000000F2		je return_draw
 000008C7  E8 00000000 E		call Randomize
 000008CC  B8 00000004			mov  eax,4     		;get random 0 to 99
 000008D1  E8 00000000 E	    call RandomRange 		;
 000008D6  40			    inc  eax         		;make range 1 to 100
 000008D7  A3 00000AE3 R	    mov  random_number,eax  ;save random number
 000008DC  83 3D 00000AE3 R		cmp random_number, 1
	   01
 000008E3  75 0C			jne posicao2
 000008E5  C7 05 00000AE7 R		mov obstaculo_index, 5
	   00000005
 000008EF  EB 36			jmp draw_final
 000008F1			posicao2:
 000008F1  83 3D 00000AE3 R		cmp random_number, 2
	   02
 000008F8  75 0C			jne posicao3
 000008FA  C7 05 00000AE7 R		mov obstaculo_index, 14
	   0000000E
 00000904  EB 21			jmp draw_final
					
 00000906			posicao3:
 00000906  83 3D 00000AE3 R		cmp random_number, 3
	   03
 0000090D  75 0C			jne posicao4
 0000090F  C7 05 00000AE7 R		mov obstaculo_index, 25
	   00000019
 00000919  EB 0C			jmp draw_final
					
 0000091B			posicao4:
 0000091B  C7 05 00000AE7 R		mov obstaculo_index, 34
	   00000022
 00000925  EB 00			jmp draw_final
 00000927			draw_final:
 00000927  B9 00000B03 R		mov ecx, OFFSET game0
 0000092C  BB 000000CD			mov ebx, 205
 00000931  03 0D 00000AE7 R		add ecx, obstaculo_index
 00000937  88 19			mov BYTE PTR [ecx], bl
 00000939  BB 000000C9			mov ebx, 201
 0000093E  83 C1 FF			add ecx, -1
 00000941  88 19			mov BYTE PTR [ecx], bl
 00000943  BB 000000BB			mov ebx, 187
 00000948  83 C1 02			add ecx, 2
 0000094B  88 19			mov BYTE PTR [ecx], bl
 0000094D  B9 00000B2D R		mov ecx, OFFSET game1
 00000952  BB 000000CD			mov ebx, 205
 00000957  03 0D 00000AE7 R		add ecx, obstaculo_index
 0000095D  88 19			mov BYTE PTR [ecx], bl
 0000095F  BB 000000CC			mov ebx, 204
 00000964  83 C1 FF			add ecx, -1
 00000967  88 19			mov BYTE PTR [ecx], bl
 00000969  BB 000000B9			mov ebx, 185
 0000096E  83 C1 02			add ecx, 2
 00000971  88 19			mov BYTE PTR [ecx], bl
 00000973  B9 00000B57 R		mov ecx, OFFSET game2
 00000978  03 0D 00000AE7 R		add ecx, obstaculo_index
 0000097E  BB 000000BA			mov ebx, 186
 00000983  83 C1 FF			add ecx, -1
 00000986  88 19			mov BYTE PTR [ecx], bl
 00000988  BB 000000BA			mov ebx, 186
 0000098D  83 C1 02			add ecx, 2
 00000990  88 19			mov BYTE PTR [ecx], bl
 00000992  B9 00000B81 R		mov ecx, OFFSET game3
 00000997  BB 000000CD			mov ebx, 205
 0000099C  03 0D 00000AE7 R		add ecx, obstaculo_index
 000009A2  88 19			mov BYTE PTR [ecx], bl
 000009A4  BB 000000C8			mov ebx, 200
 000009A9  83 C1 FF			add ecx, -1
 000009AC  88 19			mov BYTE PTR [ecx], bl
 000009AE  BB 000000BC			mov ebx, 188
 000009B3  83 C1 02			add ecx, 2
 000009B6  88 19			mov BYTE PTR [ecx], bl
 000009B8  C3				ret
 000009B9			return_draw:
 000009B9  C7 05 00000AEB R		mov obstaculo_counter, 0
	   00000000
 000009C3  C3				ret
					
 000009C4			draw_obst ENDP

				;função que realiza a movimentação dos obstaculos, copiando o obstaculo da linha de cima para 
				;a linha debaixo, caso esteja na ultima posicao, o obstaculo irá desaparecer. O primeiro obstaculo
				;é copiado de uma linha que não é impressa no console(strings game0, game1, game2 e game3)
 000009C4			draw_copy PROC
 000009C4  FC				cld
 000009C5  B9 0000002A			mov ecx, LENGTHOF game120
 000009CA  BE 00000EF3 R		mov esi, OFFSET game120
 000009CF  BF 00000FC5 R		mov edi, OFFSET game125
 000009D4  F3/ A4			rep movsb
 000009D6  FC				cld
 000009D7  B9 0000002A			mov ecx, LENGTHOF game121
 000009DC  BE 00000F1D R		mov esi, OFFSET game121
 000009E1  BF 00000FEF R		mov edi, OFFSET game126
 000009E6  F3/ A4			rep movsb
 000009E8  FC				cld
 000009E9  B9 0000002A			mov ecx, LENGTHOF game122
 000009EE  BE 00000F47 R		mov esi, OFFSET game122
 000009F3  BF 00001019 R		mov edi, OFFSET game127
 000009F8  F3/ A4			rep movsb
 000009FA  FC				cld
 000009FB  B9 0000002A			mov ecx, LENGTHOF game123
 00000A00  BE 00000F71 R		mov esi, OFFSET game123
 00000A05  BF 00001043 R		mov edi, OFFSET game128
 00000A0A  F3/ A4			rep movsb
					
 00000A0C  FC				cld
 00000A0D  B9 0000002A			mov ecx, LENGTHOF game115
 00000A12  BE 00000E21 R		mov esi, OFFSET game115
 00000A17  BF 00000EF3 R		mov edi, OFFSET game120
 00000A1C  F3/ A4			rep movsb
 00000A1E  FC				cld
 00000A1F  B9 0000002A			mov ecx, LENGTHOF game116
 00000A24  BE 00000E4B R		mov esi, OFFSET game116
 00000A29  BF 00000F1D R		mov edi, OFFSET game121
 00000A2E  F3/ A4			rep movsb
 00000A30  FC				cld
 00000A31  B9 0000002A			mov ecx, LENGTHOF game117
 00000A36  BE 00000E75 R		mov esi, OFFSET game117
 00000A3B  BF 00000F47 R		mov edi, OFFSET game122
 00000A40  F3/ A4			rep movsb
 00000A42  FC				cld
 00000A43  B9 0000002A			mov ecx, LENGTHOF game118
 00000A48  BE 00000E9F R		mov esi, OFFSET game118
 00000A4D  BF 00000F71 R		mov edi, OFFSET game123
 00000A52  F3/ A4			rep movsb
					
 00000A54  FC				cld
 00000A55  B9 0000002A			mov ecx, LENGTHOF game110
 00000A5A  BE 00000D4F R		mov esi, OFFSET game110
 00000A5F  BF 00000E21 R		mov edi, OFFSET game115
 00000A64  F3/ A4			rep movsb
 00000A66  FC				cld
 00000A67  B9 0000002A			mov ecx, LENGTHOF game111
 00000A6C  BE 00000D79 R		mov esi, OFFSET game111
 00000A71  BF 00000E4B R		mov edi, OFFSET game116
 00000A76  F3/ A4			rep movsb
 00000A78  FC				cld
 00000A79  B9 0000002A			mov ecx, LENGTHOF game112
 00000A7E  BE 00000DA3 R		mov esi, OFFSET game112
 00000A83  BF 00000E75 R		mov edi, OFFSET game117
 00000A88  F3/ A4			rep movsb
 00000A8A  FC				cld
 00000A8B  B9 0000002A			mov ecx, LENGTHOF game113
 00000A90  BE 00000DCD R		mov esi, OFFSET game113
 00000A95  BF 00000E9F R		mov edi, OFFSET game118
 00000A9A  F3/ A4			rep movsb
					
 00000A9C  FC				cld
 00000A9D  B9 0000002A			mov ecx, LENGTHOF game105
 00000AA2  BE 00000C7D R		mov esi, OFFSET game105
 00000AA7  BF 00000D4F R		mov edi, OFFSET game110
 00000AAC  F3/ A4			rep movsb
 00000AAE  FC				cld
 00000AAF  B9 0000002A			mov ecx, LENGTHOF game106
 00000AB4  BE 00000CA7 R		mov esi, OFFSET game106
 00000AB9  BF 00000D79 R		mov edi, OFFSET game111
 00000ABE  F3/ A4			rep movsb
 00000AC0  FC				cld
 00000AC1  B9 0000002A			mov ecx, LENGTHOF game107
 00000AC6  BE 00000CD1 R		mov esi, OFFSET game107
 00000ACB  BF 00000DA3 R		mov edi, OFFSET game112
 00000AD0  F3/ A4			rep movsb
 00000AD2  FC				cld
 00000AD3  B9 0000002A			mov ecx, LENGTHOF game108
 00000AD8  BE 00000CFB R		mov esi, OFFSET game108
 00000ADD  BF 00000DCD R		mov edi, OFFSET game113
 00000AE2  F3/ A4			rep movsb
					
 00000AE4  FC				cld
 00000AE5  B9 0000002A			mov ecx, LENGTHOF game100
 00000AEA  BE 00000BAB R		mov esi, OFFSET game100
 00000AEF  BF 00000C7D R		mov edi, OFFSET game105
 00000AF4  F3/ A4			rep movsb
 00000AF6  FC				cld
 00000AF7  B9 0000002A			mov ecx, LENGTHOF game101
 00000AFC  BE 00000BD5 R		mov esi, OFFSET game101
 00000B01  BF 00000CA7 R		mov edi, OFFSET game106
 00000B06  F3/ A4			rep movsb
 00000B08  FC				cld
 00000B09  B9 0000002A			mov ecx, LENGTHOF game102
 00000B0E  BE 00000BFF R		mov esi, OFFSET game102
 00000B13  BF 00000CD1 R		mov edi, OFFSET game107
 00000B18  F3/ A4			rep movsb
 00000B1A  FC				cld
 00000B1B  B9 0000002A			mov ecx, LENGTHOF game103
 00000B20  BE 00000C29 R		mov esi, OFFSET game103
 00000B25  BF 00000CFB R		mov edi, OFFSET game108
 00000B2A  F3/ A4			rep movsb
					
 00000B2C  FC				cld
 00000B2D  B9 0000002A			mov ecx, LENGTHOF game0
 00000B32  BE 00000B03 R		mov esi, OFFSET game0
 00000B37  BF 00000BAB R		mov edi, OFFSET game100
 00000B3C  F3/ A4			rep movsb
 00000B3E  FC				cld
 00000B3F  B9 0000002A			mov ecx, LENGTHOF game1
 00000B44  BE 00000B2D R		mov esi, OFFSET game1
 00000B49  BF 00000BD5 R		mov edi, OFFSET game101
 00000B4E  F3/ A4			rep movsb
 00000B50  FC				cld
 00000B51  B9 0000002A			mov ecx, LENGTHOF game2
 00000B56  BE 00000B57 R		mov esi, OFFSET game2
 00000B5B  BF 00000BFF R		mov edi, OFFSET game102
 00000B60  F3/ A4			rep movsb
 00000B62  FC				cld
 00000B63  B9 0000002A			mov ecx, LENGTHOF game3
 00000B68  BE 00000B81 R		mov esi, OFFSET game3
 00000B6D  BF 00000C29 R		mov edi, OFFSET game103
 00000B72  F3/ A4			rep movsb
 00000B74  C3				ret
 00000B75			draw_copy ENDP

				;função que atualiza a tela com os dados novos
 00000B75			draw_game PROC
 00000B75  33 D2			xor edx, edx
 00000B77  B2 1C			mov dl, 28
 00000B79  B6 00			mov dh, 0
 00000B7B  E8 00000000 E		call Gotoxy
 00000B80  52				push edx
 00000B81  BA 00000BAB R		mov edx, OFFSET game100
 00000B86  E8 00000000 E		call WriteString
 00000B8B  5A				pop edx
 00000B8C  FE C6			inc dh
 00000B8E  E8 00000000 E		Call Gotoxy
 00000B93  52				push edx
 00000B94  BA 00000BD5 R		mov edx, OFFSET game101
 00000B99  E8 00000000 E		call WriteString
 00000B9E  5A				pop edx
 00000B9F  FE C6			inc dh
 00000BA1  E8 00000000 E		Call Gotoxy
 00000BA6  52				push edx
 00000BA7  BA 00000BFF R		mov edx, OFFSET game102
 00000BAC  E8 00000000 E		call WriteString
 00000BB1  5A				pop edx
 00000BB2  FE C6			inc dh
 00000BB4  E8 00000000 E		Call Gotoxy
 00000BB9  52				push edx
 00000BBA  BA 00000C29 R		mov edx, OFFSET game103
 00000BBF  E8 00000000 E		call WriteString
 00000BC4  5A				pop edx
 00000BC5  FE C6			inc dh
 00000BC7  E8 00000000 E		Call Gotoxy
 00000BCC  52				push edx
 00000BCD  BA 00000C53 R		mov edx, OFFSET game104
 00000BD2  E8 00000000 E		call WriteString
 00000BD7  5A				pop edx
 00000BD8  FE C6			inc dh
 00000BDA  E8 00000000 E		Call Gotoxy
 00000BDF  52				push edx
 00000BE0  BA 00000C7D R		mov edx, OFFSET game105
 00000BE5  E8 00000000 E		call WriteString
 00000BEA  5A				pop edx
 00000BEB  FE C6			inc dh
 00000BED  E8 00000000 E		Call Gotoxy
 00000BF2  52				push edx
 00000BF3  BA 00000CA7 R		mov edx, OFFSET game106
 00000BF8  E8 00000000 E		call WriteString
 00000BFD  5A				pop edx
 00000BFE  FE C6			inc dh
 00000C00  E8 00000000 E		Call Gotoxy
 00000C05  52				push edx
 00000C06  BA 00000CD1 R		mov edx, OFFSET game107
 00000C0B  E8 00000000 E		call WriteString
 00000C10  5A				pop edx
 00000C11  FE C6			inc dh
 00000C13  E8 00000000 E		Call Gotoxy
 00000C18  52				push edx
 00000C19  BA 00000CFB R		mov edx, OFFSET game108
 00000C1E  E8 00000000 E		call WriteString
 00000C23  5A				pop edx
 00000C24  FE C6			inc dh
 00000C26  E8 00000000 E		Call Gotoxy
 00000C2B  52				push edx
 00000C2C  BA 00000D25 R		mov edx, OFFSET game109
 00000C31  E8 00000000 E		call WriteString
 00000C36  5A				pop edx
 00000C37  FE C6			inc dh
 00000C39  E8 00000000 E		Call Gotoxy
 00000C3E  52				push edx
 00000C3F  BA 00000D4F R		mov edx, OFFSET game110
 00000C44  E8 00000000 E		call WriteString
 00000C49  5A				pop edx
 00000C4A  FE C6			inc dh
 00000C4C  E8 00000000 E		Call Gotoxy
 00000C51  52				push edx
 00000C52  BA 00000D79 R		mov edx, OFFSET game111
 00000C57  E8 00000000 E		call WriteString
 00000C5C  5A				pop edx
 00000C5D  FE C6			inc dh
 00000C5F  E8 00000000 E		Call Gotoxy
 00000C64  52				push edx
 00000C65  BA 00000DA3 R		mov edx, OFFSET game112
 00000C6A  E8 00000000 E		call WriteString
 00000C6F  5A				pop edx
 00000C70  FE C6			inc dh
 00000C72  E8 00000000 E		Call Gotoxy
 00000C77  52				push edx
 00000C78  BA 00000DCD R		mov edx, OFFSET game113
 00000C7D  E8 00000000 E		call WriteString
 00000C82  5A				pop edx
 00000C83  FE C6			inc dh
 00000C85  E8 00000000 E		Call Gotoxy
 00000C8A  52				push edx
 00000C8B  BA 00000DF7 R		mov edx, OFFSET game114
 00000C90  E8 00000000 E		call WriteString
 00000C95  5A				pop edx
 00000C96  FE C6			inc dh
 00000C98  E8 00000000 E		Call Gotoxy
 00000C9D  52				push edx
 00000C9E  BA 00000E21 R		mov edx, OFFSET game115
 00000CA3  E8 00000000 E		call WriteString
 00000CA8  5A				pop edx
 00000CA9  FE C6			inc dh
 00000CAB  E8 00000000 E		Call Gotoxy
 00000CB0  52				push edx
 00000CB1  BA 00000E4B R		mov edx, OFFSET game116
 00000CB6  E8 00000000 E		call WriteString
 00000CBB  5A				pop edx
 00000CBC  FE C6			inc dh
 00000CBE  E8 00000000 E		Call Gotoxy
 00000CC3  52				push edx
 00000CC4  BA 00000E75 R		mov edx, OFFSET game117
 00000CC9  E8 00000000 E		call WriteString
 00000CCE  5A				pop edx
 00000CCF  FE C6			inc dh
 00000CD1  E8 00000000 E		Call Gotoxy
 00000CD6  52				push edx
 00000CD7  BA 00000E9F R		mov edx, OFFSET game118
 00000CDC  E8 00000000 E		call WriteString
 00000CE1  5A				pop edx
 00000CE2  FE C6			inc dh
 00000CE4  E8 00000000 E		Call Gotoxy
 00000CE9  52				push edx
 00000CEA  BA 00000EC9 R		mov edx, OFFSET game119
 00000CEF  E8 00000000 E		call WriteString
 00000CF4  5A				pop edx
 00000CF5  FE C6			inc dh
 00000CF7  E8 00000000 E		Call Gotoxy
 00000CFC  52				push edx
 00000CFD  BA 00000EF3 R		mov edx, OFFSET game120
 00000D02  E8 00000000 E		call WriteString
 00000D07  5A				pop edx
 00000D08  FE C6			inc dh
 00000D0A  E8 00000000 E		Call Gotoxy
 00000D0F  52				push edx
 00000D10  BA 00000F1D R		mov edx, OFFSET game121
 00000D15  E8 00000000 E		call WriteString
 00000D1A  5A				pop edx
 00000D1B  FE C6			inc dh
 00000D1D  E8 00000000 E		Call Gotoxy
 00000D22  52				push edx
 00000D23  BA 00000F47 R		mov edx, OFFSET game122
 00000D28  E8 00000000 E		call WriteString
 00000D2D  5A				pop edx
 00000D2E  FE C6			inc dh
 00000D30  E8 00000000 E		Call Gotoxy
 00000D35  52				push edx
 00000D36  BA 00000F71 R		mov edx, OFFSET game123
 00000D3B  E8 00000000 E		call WriteString
 00000D40  5A				pop edx
 00000D41  FE C6			inc dh
 00000D43  E8 00000000 E		Call Gotoxy
 00000D48  52				push edx
 00000D49  BA 00000F9B R		mov edx, OFFSET game124
 00000D4E  E8 00000000 E		call WriteString
 00000D53  5A				pop edx
 00000D54  FE C6			inc dh
 00000D56  E8 00000000 E		Call Gotoxy
 00000D5B  52				push edx
 00000D5C  BA 00000FC5 R		mov edx, OFFSET game125
 00000D61  E8 00000000 E		call WriteString
 00000D66  5A				pop edx
 00000D67  FE C6			inc dh
 00000D69  E8 00000000 E		Call Gotoxy
 00000D6E  52				push edx
 00000D6F  BA 00000FEF R		mov edx, OFFSET game126
 00000D74  E8 00000000 E		call WriteString
 00000D79  5A				pop edx
 00000D7A  FE C6			inc dh
 00000D7C  E8 00000000 E		Call Gotoxy
 00000D81  52				push edx
 00000D82  BA 00001019 R		mov edx, OFFSET game127
 00000D87  E8 00000000 E		call WriteString
 00000D8C  5A				pop edx
 00000D8D  FE C6			inc dh
 00000D8F  E8 00000000 E		Call Gotoxy
 00000D94  52				push edx
 00000D95  BA 00001043 R		mov edx, OFFSET game128
 00000D9A  E8 00000000 E		call WriteString
 00000D9F  5A				pop edx
 00000DA0  FE C6			inc dh
 00000DA2  E8 00000000 E		Call Gotoxy
 00000DA7  52				push edx
 00000DA8  BA 0000106D R		mov edx, OFFSET game129
 00000DAD  E8 00000000 E		call WriteString
 00000DB2  5A				pop edx
 00000DB3  FE C6			inc dh
 00000DB5  E8 00000000 E		Call Gotoxy
 00000DBA  52				push edx
 00000DBB  BA 00001097 R		mov edx, OFFSET game130
 00000DC0  E8 00000000 E		call WriteString
 00000DC5  5A				pop edx
 00000DC6  FE C6			inc dh
 00000DC8  E8 00000000 E		Call Gotoxy
 00000DCD  52				push edx
 00000DCE  BA 000010C1 R		mov edx, OFFSET game131
 00000DD3  E8 00000000 E		call WriteString
 00000DD8  5A				pop edx
 00000DD9  FE C6			inc dh
 00000DDB  E8 00000000 E		Call Gotoxy
 00000DE0  52				push edx
 00000DE1  BA 000010EB R		mov edx, OFFSET game132
 00000DE6  E8 00000000 E		call WriteString
 00000DEB  5A				pop edx
 00000DEC  FE C6			inc dh
 00000DEE  E8 00000000 E		Call Gotoxy
 00000DF3  52				push edx
 00000DF4  BA 00001115 R		mov edx, OFFSET game133
 00000DF9  E8 00000000 E		call WriteString
 00000DFE  5A				pop edx
 00000DFF  FE C6			inc dh
 00000E01  B2 51			mov dl,	81
 00000E03  B6 20			mov dh, 32
 00000E05  E8 00000000 E		call Gotoxy
 00000E0A  A1 00000AF7 R		mov eax, level
 00000E0F  E8 00000000 E		call WriteDec
 00000E14  FE C6			inc dh
 00000E16  E8 00000000 E		call Gotoxy
 00000E1B  A1 00000AF3 R		mov eax, score
 00000E20  E8 00000000 E		call WriteDec
 00000E25  C3				ret
					
 00000E26			draw_game ENDP

				;função que imprime todo o jogo na tela pela primeira vez
 00000E26			draw_game_init PROC
 00000E26  E8 00000000 E		call Clrscr
 00000E2B  E8 00000000 E		call Crlf
 00000E30  B8 00000002			mov  eax,green+(black*16)
 00000E35  E8 00000000 E	    call SetTextColor
 00000E3A  BA 00000708 R		mov  edx,OFFSET game000
 00000E3F  E8 00000000 E	    call WriteString
 00000E44  B8 0000000F			mov  eax,white+(black*16)
 00000E49  E8 00000000 E	    call SetTextColor
 00000E4E  BA 00000BAB R		mov  edx,OFFSET game100
 00000E53  E8 00000000 E	    call WriteString
 00000E58  B8 00000002			mov  eax,green+(black*16)
 00000E5D  E8 00000000 E	    call SetTextColor
 00000E62  BA 0000113F R		mov  edx,OFFSET game200
 00000E67  E8 00000000 E	    call WriteString
 00000E6C  BA 00000725 R		mov  edx,OFFSET game001
 00000E71  E8 00000000 E	    call WriteString
 00000E76  B8 0000000F			mov  eax,white+(black*16)
 00000E7B  E8 00000000 E	    call SetTextColor
 00000E80  BA 00000BD5 R		mov  edx,OFFSET game101
 00000E85  E8 00000000 E	    call WriteString
 00000E8A  B8 00000002			mov  eax,green+(black*16)
 00000E8F  E8 00000000 E	    call SetTextColor
 00000E94  BA 0000115C R		mov  edx,OFFSET game201
 00000E99  E8 00000000 E	    call WriteString
 00000E9E  BA 00000742 R		mov  edx,OFFSET game002
 00000EA3  E8 00000000 E	    call WriteString
 00000EA8  B8 0000000F			mov  eax,white+(black*16)
 00000EAD  E8 00000000 E	    call SetTextColor
 00000EB2  BA 00000BFF R		mov  edx,OFFSET game102
 00000EB7  E8 00000000 E	    call WriteString
 00000EBC  B8 00000002			mov  eax,green+(black*16)
 00000EC1  E8 00000000 E	    call SetTextColor
 00000EC6  BA 00001179 R		mov  edx,OFFSET game202
 00000ECB  E8 00000000 E	    call WriteString
 00000ED0  BA 0000075F R		mov  edx,OFFSET game003
 00000ED5  E8 00000000 E	    call WriteString
 00000EDA  B8 0000000F			mov  eax,white+(black*16)
 00000EDF  E8 00000000 E	    call SetTextColor
 00000EE4  BA 00000C29 R		mov  edx,OFFSET game103
 00000EE9  E8 00000000 E	    call WriteString
 00000EEE  B8 00000002			mov  eax,green+(black*16)
 00000EF3  E8 00000000 E	    call SetTextColor
 00000EF8  BA 00001196 R		mov  edx,OFFSET game203
 00000EFD  E8 00000000 E	    call WriteString
 00000F02  BA 0000077C R		mov  edx,OFFSET game004
 00000F07  E8 00000000 E	    call WriteString
 00000F0C  B8 0000000F			mov  eax,white+(black*16)
 00000F11  E8 00000000 E	    call SetTextColor
 00000F16  BA 00000C53 R		mov edx, OFFSET game104
 00000F1B  E8 00000000 E		call WriteString
 00000F20  B8 00000002			mov  eax,green+(black*16)
 00000F25  E8 00000000 E	    call SetTextColor
 00000F2A  BA 000011B3 R		mov  edx,OFFSET game204
 00000F2F  E8 00000000 E	    call WriteString
 00000F34  B8 0000000F			mov  eax,white+(black*16)
 00000F39  E8 00000000 E	    call SetTextColor
 00000F3E  BA 00000799 R		mov  edx,OFFSET game005
 00000F43  E8 00000000 E	    call WriteString
 00000F48  BA 00000C7D R		mov  edx,OFFSET game105
 00000F4D  E8 00000000 E	    call WriteString
 00000F52  BA 000011D0 R		mov  edx,OFFSET game205
 00000F57  E8 00000000 E	    call WriteString
 00000F5C  BA 000007B6 R		mov  edx,OFFSET game006
 00000F61  E8 00000000 E	    call WriteString
 00000F66  BA 00000CA7 R		mov  edx,OFFSET game106
 00000F6B  E8 00000000 E	    call WriteString
 00000F70  BA 000011ED R		mov  edx,OFFSET game206
 00000F75  E8 00000000 E	    call WriteString
 00000F7A  BA 000007D3 R		mov  edx,OFFSET game007
 00000F7F  E8 00000000 E	    call WriteString
 00000F84  BA 00000CD1 R		mov  edx,OFFSET game107
 00000F89  E8 00000000 E	    call WriteString
 00000F8E  BA 0000120A R		mov  edx,OFFSET game207
 00000F93  E8 00000000 E	    call WriteString
 00000F98  BA 000007F0 R		mov  edx,OFFSET game008
 00000F9D  E8 00000000 E	    call WriteString
 00000FA2  BA 00000CFB R		mov  edx,OFFSET game108
 00000FA7  E8 00000000 E	    call WriteString
 00000FAC  BA 00001227 R		mov  edx,OFFSET game208
 00000FB1  E8 00000000 E	    call WriteString
 00000FB6  BA 0000080D R		mov  edx,OFFSET game009
 00000FBB  E8 00000000 E	    call WriteString
 00000FC0  BA 00000D25 R		mov edx, OFFSET game109
 00000FC5  E8 00000000 E		call WriteString
 00000FCA  BA 00001244 R		mov  edx,OFFSET game209
 00000FCF  E8 00000000 E	    call WriteString
 00000FD4  BA 0000082A R		mov  edx,OFFSET game010
 00000FD9  E8 00000000 E	    call WriteString
 00000FDE  BA 00000D4F R		mov  edx,OFFSET game110
 00000FE3  E8 00000000 E	    call WriteString
 00000FE8  BA 00001261 R		mov  edx,OFFSET game210	
 00000FED  E8 00000000 E	    call WriteString
 00000FF2  B8 00000002			mov  eax,green+(black*16)
 00000FF7  E8 00000000 E	    call SetTextColor
 00000FFC  BA 00000847 R		mov  edx,OFFSET game011
 00001001  E8 00000000 E	    call WriteString
 00001006  B8 0000000F			mov  eax,white+(black*16)
 0000100B  E8 00000000 E	    call SetTextColor
 00001010  BA 00000D79 R		mov  edx,OFFSET game111
 00001015  E8 00000000 E	    call WriteString
 0000101A  B8 00000002			mov  eax,green+(black*16)
 0000101F  E8 00000000 E	    call SetTextColor
 00001024  BA 0000127E R		mov  edx,OFFSET game211
 00001029  E8 00000000 E	    call WriteString
 0000102E  BA 00000864 R		mov  edx,OFFSET game012
 00001033  E8 00000000 E	    call WriteString
 00001038  B8 0000000F			mov  eax,white+(black*16)
 0000103D  E8 00000000 E	    call SetTextColor
 00001042  BA 00000DA3 R		mov  edx,OFFSET game112
 00001047  E8 00000000 E	    call WriteString
 0000104C  B8 00000002			mov  eax,green+(black*16)
 00001051  E8 00000000 E	    call SetTextColor
 00001056  BA 0000129B R		mov  edx,OFFSET game212
 0000105B  E8 00000000 E	    call WriteString
 00001060  BA 00000881 R		mov  edx,OFFSET game013
 00001065  E8 00000000 E	    call WriteString
 0000106A  B8 0000000F			mov  eax,white+(black*16)
 0000106F  E8 00000000 E	    call SetTextColor
 00001074  BA 00000DCD R		mov  edx,OFFSET game113
 00001079  E8 00000000 E	    call WriteString
 0000107E  B8 00000002			mov  eax,green+(black*16)
 00001083  E8 00000000 E	    call SetTextColor
 00001088  BA 000012B8 R		mov  edx,OFFSET game213
 0000108D  E8 00000000 E	    call WriteString
 00001092  BA 0000089E R		mov  edx,OFFSET game014
 00001097  E8 00000000 E	    call WriteString
 0000109C  B8 0000000F			mov  eax,white+(black*16)
 000010A1  E8 00000000 E	    call SetTextColor
 000010A6  BA 00000DF7 R		mov edx, OFFSET game114
 000010AB  E8 00000000 E		call WriteString
 000010B0  B8 00000002			mov  eax,green+(black*16)
 000010B5  E8 00000000 E	    call SetTextColor
 000010BA  BA 000012D5 R		mov  edx,OFFSET game214
 000010BF  E8 00000000 E	    call WriteString
 000010C4  BA 000008BB R		mov  edx,OFFSET game015
 000010C9  E8 00000000 E	    call WriteString
 000010CE  B8 0000000F			mov  eax,white+(black*16)
 000010D3  E8 00000000 E	    call SetTextColor
 000010D8  BA 00000E21 R		mov  edx,OFFSET game115
 000010DD  E8 00000000 E	    call WriteString
 000010E2  B8 00000002			mov  eax,green+(black*16)
 000010E7  E8 00000000 E	    call SetTextColor
 000010EC  BA 000012F2 R		mov  edx,OFFSET game215
 000010F1  E8 00000000 E	    call WriteString
 000010F6  B8 0000000F			mov  eax,white+(black*16)
 000010FB  E8 00000000 E	    call SetTextColor
 00001100  BA 000008D8 R		mov  edx,OFFSET game016
 00001105  E8 00000000 E	    call WriteString
 0000110A  BA 00000E4B R		mov  edx,OFFSET game116
 0000110F  E8 00000000 E	    call WriteString
 00001114  BA 0000130F R		mov  edx,OFFSET game216
 00001119  E8 00000000 E	    call WriteString
 0000111E  BA 000008F5 R		mov  edx,OFFSET game017
 00001123  E8 00000000 E	    call WriteString
 00001128  BA 00000E75 R		mov  edx,OFFSET game117
 0000112D  E8 00000000 E	    call WriteString
 00001132  BA 0000132C R		mov  edx,OFFSET game217
 00001137  E8 00000000 E	    call WriteString
 0000113C  BA 00000912 R		mov  edx,OFFSET game018
 00001141  E8 00000000 E	    call WriteString
 00001146  BA 00000E9F R		mov  edx,OFFSET game118
 0000114B  E8 00000000 E	    call WriteString
 00001150  BA 00001349 R		mov  edx,OFFSET game218
 00001155  E8 00000000 E	    call WriteString
 0000115A  BA 0000092F R		mov  edx,OFFSET game019
 0000115F  E8 00000000 E	    call WriteString
 00001164  BA 00000EC9 R		mov edx, OFFSET game119
 00001169  E8 00000000 E		call WriteString
 0000116E  BA 00001366 R		mov  edx,OFFSET game219
 00001173  E8 00000000 E	    call WriteString
 00001178  BA 0000094C R		mov  edx,OFFSET game020
 0000117D  E8 00000000 E	    call WriteString
 00001182  BA 00000EF3 R		mov  edx,OFFSET game120
 00001187  E8 00000000 E	    call WriteString
 0000118C  B8 00000002			mov  eax,green+(black*16)
 00001191  E8 00000000 E	    call SetTextColor
 00001196  BA 00001383 R		mov  edx,OFFSET game220
 0000119B  E8 00000000 E	    call WriteString
 000011A0  B8 0000000F			mov  eax,white+(black*16)
 000011A5  E8 00000000 E	    call SetTextColor
 000011AA  BA 00000969 R		mov  edx,OFFSET game021
 000011AF  E8 00000000 E	    call WriteString
 000011B4  BA 00000F1D R		mov  edx,OFFSET game121
 000011B9  E8 00000000 E	    call WriteString
 000011BE  B8 00000002			mov  eax,green+(black*16)
 000011C3  E8 00000000 E	    call SetTextColor
 000011C8  BA 000013A0 R		mov  edx,OFFSET game221
 000011CD  E8 00000000 E	    call WriteString
 000011D2  B8 0000000F			mov  eax,white+(black*16)
 000011D7  E8 00000000 E	    call SetTextColor
 000011DC  BA 00000986 R		mov  edx,OFFSET game022
 000011E1  E8 00000000 E	    call WriteString
 000011E6  BA 00000F47 R		mov  edx,OFFSET game122
 000011EB  E8 00000000 E	    call WriteString
 000011F0  B8 00000002			mov  eax,green+(black*16)
 000011F5  E8 00000000 E	    call SetTextColor
 000011FA  BA 000013BD R		mov  edx,OFFSET game222
 000011FF  E8 00000000 E	    call WriteString
 00001204  B8 0000000F			mov  eax,white+(black*16)
 00001209  E8 00000000 E	    call SetTextColor
 0000120E  BA 000009A3 R		mov  edx,OFFSET game023
 00001213  E8 00000000 E	    call WriteString
 00001218  BA 00000F71 R		mov  edx,OFFSET game123
 0000121D  E8 00000000 E	    call WriteString
 00001222  B8 00000002			mov  eax,green+(black*16)
 00001227  E8 00000000 E	    call SetTextColor
 0000122C  BA 000013DA R		mov  edx,OFFSET game223
 00001231  E8 00000000 E	    call WriteString
 00001236  B8 0000000F			mov  eax,white+(black*16)
 0000123B  E8 00000000 E	    call SetTextColor
 00001240  BA 000009C0 R		mov  edx,OFFSET game024
 00001245  E8 00000000 E	    call WriteString
 0000124A  BA 00000F9B R		mov edx, OFFSET game124
 0000124F  E8 00000000 E		call WriteString
 00001254  B8 00000002			mov  eax,green+(black*16)
 00001259  E8 00000000 E	    call SetTextColor
 0000125E  BA 000013F7 R		mov  edx,OFFSET game224
 00001263  E8 00000000 E	    call WriteString
 00001268  B8 0000000F			mov  eax,white+(black*16)
 0000126D  E8 00000000 E	    call SetTextColor
 00001272  BA 000009DD R		mov  edx,OFFSET game025
 00001277  E8 00000000 E	    call WriteString
 0000127C  BA 00000FC5 R		mov  edx,OFFSET game125
 00001281  E8 00000000 E	    call WriteString
 00001286  BA 00001414 R		mov  edx,OFFSET game225
 0000128B  E8 00000000 E	    call WriteString
 00001290  B8 00000002			mov  eax,green+(black*16)
 00001295  E8 00000000 E	    call SetTextColor
 0000129A  BA 000009FA R		mov  edx,OFFSET game026
 0000129F  E8 00000000 E	    call WriteString
 000012A4  B8 0000000F			mov  eax,white+(black*16)
 000012A9  E8 00000000 E	    call SetTextColor
 000012AE  BA 00000FEF R		mov  edx,OFFSET game126
 000012B3  E8 00000000 E	    call WriteString
 000012B8  BA 00001431 R		mov  edx,OFFSET game226
 000012BD  E8 00000000 E	    call WriteString
 000012C2  B8 00000002			mov  eax,green+(black*16)
 000012C7  E8 00000000 E	    call SetTextColor
 000012CC  BA 00000A17 R		mov  edx,OFFSET game027
 000012D1  E8 00000000 E	    call WriteString
 000012D6  B8 0000000F			mov  eax,white+(black*16)
 000012DB  E8 00000000 E	    call SetTextColor
 000012E0  BA 00001019 R		mov  edx,OFFSET game127
 000012E5  E8 00000000 E	    call WriteString
 000012EA  BA 0000144E R		mov  edx,OFFSET game227
 000012EF  E8 00000000 E	    call WriteString
 000012F4  B8 00000002			mov  eax,green+(black*16)
 000012F9  E8 00000000 E	    call SetTextColor
 000012FE  BA 00000A34 R		mov  edx,OFFSET game028
 00001303  E8 00000000 E	    call WriteString
 00001308  B8 0000000F			mov  eax,white+(black*16)
 0000130D  E8 00000000 E	    call SetTextColor
 00001312  BA 00001043 R		mov  edx,OFFSET game128
 00001317  E8 00000000 E	    call WriteString
 0000131C  BA 0000146B R		mov  edx,OFFSET game228
 00001321  E8 00000000 E	    call WriteString
 00001326  B8 00000002			mov  eax,green+(black*16)
 0000132B  E8 00000000 E	    call SetTextColor
 00001330  BA 00000A51 R		mov  edx,OFFSET game029
 00001335  E8 00000000 E	    call WriteString
 0000133A  B8 0000000F			mov  eax,white+(black*16)
 0000133F  E8 00000000 E	    call SetTextColor
 00001344  BA 0000106D R		mov edx, OFFSET game129
 00001349  E8 00000000 E		call WriteString
 0000134E  BA 00001488 R		mov  edx,OFFSET game229
 00001353  E8 00000000 E	    call WriteString
 00001358  B8 00000002			mov  eax,green+(black*16)
 0000135D  E8 00000000 E	    call SetTextColor
 00001362  BA 00000A6E R		mov  edx,OFFSET game030
 00001367  E8 00000000 E	    call WriteString
 0000136C  B8 0000000F			mov  eax,white+(black*16)
 00001371  E8 00000000 E	    call SetTextColor
 00001376  BA 00001097 R		mov  edx,OFFSET game130
 0000137B  E8 00000000 E	    call WriteString
 00001380  BA 000014A5 R		mov  edx,OFFSET game230
 00001385  E8 00000000 E	    call WriteString
 0000138A  BA 00000A8B R		mov  edx,OFFSET game031
 0000138F  E8 00000000 E	    call WriteString
 00001394  BA 000010C1 R		mov  edx,OFFSET game131
 00001399  E8 00000000 E	    call WriteString
 0000139E  B8 0000000E			mov  eax,yellow+(black*16)
 000013A3  E8 00000000 E	    call SetTextColor
 000013A8  BA 000014C2 R		mov  edx,OFFSET game231
 000013AD  E8 00000000 E	    call WriteString
 000013B2  B8 0000000F			mov  eax,white+(black*16)
 000013B7  E8 00000000 E	    call SetTextColor
 000013BC  A1 00000AF7 R		mov eax, level
 000013C1  E8 00000000 E		call WriteDec
 000013C6  E8 00000000 E		call Crlf
 000013CB  BA 00000AA8 R		mov  edx,OFFSET game032
 000013D0  E8 00000000 E	    call WriteString
 000013D5  BA 000010EB R		mov  edx,OFFSET game132
 000013DA  E8 00000000 E	    call WriteString
 000013DF  B8 0000000E			mov  eax,yellow+(black*16)
 000013E4  E8 00000000 E	    call SetTextColor
 000013E9  BA 000014CF R		mov  edx,OFFSET game232
 000013EE  E8 00000000 E	    call WriteString
 000013F3  B8 0000000F			mov  eax,white+(black*16)
 000013F8  E8 00000000 E	    call SetTextColor
 000013FD  A1 00000AF3 R		mov eax, score
 00001402  E8 00000000 E		call WriteDec
 00001407  E8 00000000 E		call Crlf
 0000140C  BA 00000AC5 R		mov  edx,OFFSET game033
 00001411  E8 00000000 E	    call WriteString
 00001416  BA 00001115 R		mov  edx,OFFSET game133
 0000141B  E8 00000000 E	    call WriteString
 00001420  BA 000014DC R		mov  edx,OFFSET game233
 00001425  E8 00000000 E	    call WriteString
 0000142A  C3				ret
 0000142B			draw_game_init ENDP

				;função que imprime no console a tela de perdeu
 0000142B			draw_lost PROC
 0000142B  E8 00000000 E		call Clrscr
 00001430  E8 00000000 E		call Crlf
 00001435  B8 00000003			mov  eax,cyan+(black*16)
 0000143A  E8 00000000 E	    call SetTextColor
 0000143F  BA 00000001 R		mov  edx,OFFSET menu01
 00001444  E8 00000000 E	    call WriteString
 00001449  E8 00000000 E		call Crlf
 0000144E  BA 00000043 R		mov  edx,OFFSET menu02
 00001453  E8 00000000 E	    call WriteString
 00001458  E8 00000000 E		call Crlf
 0000145D  BA 00000085 R		mov  edx,OFFSET menu03
 00001462  E8 00000000 E	    call WriteString
 00001467  E8 00000000 E		call Crlf
 0000146C  BA 000000C7 R		mov  edx,OFFSET menu04
 00001471  E8 00000000 E	    call WriteString
 00001476  E8 00000000 E		call Crlf
 0000147B  BA 00000109 R		mov edx, OFFSET menu05
 00001480  E8 00000000 E		call WriteString
 00001485  B8 0000000F			mov  eax,white+(black*16)
 0000148A  E8 00000000 E	    call SetTextColor
 0000148F  E8 00000000 E		call Crlf
 00001494  E8 00000000 E		call Crlf
 00001499  E8 00000000 E		call Crlf
 0000149E  B8 00000005			mov  eax,magenta+(black*16)
 000014A3  E8 00000000 E	    call SetTextColor
 000014A8  BA 00000632 R		mov  edx,OFFSET lost00
 000014AD  E8 00000000 E	    call WriteString
 000014B2  B8 0000000F			mov  eax,white+(black*16)
 000014B7  E8 00000000 E	    call SetTextColor
 000014BC  E8 00000000 E		call Crlf
 000014C1  BA 00000674 R		mov  edx,OFFSET lost01
 000014C6  E8 00000000 E	    call WriteString
 000014CB  A1 00000AF3 R		mov eax, score
 000014D0  E8 00000000 E		call WriteDec
 000014D5  E8 00000000 E		call Crlf
 000014DA  BA 0000069D R		mov  edx,OFFSET lost02
 000014DF  E8 00000000 E	    call WriteString
 000014E4  A1 00000AF7 R		mov eax, level
 000014E9  E8 00000000 E		call WriteDec
 000014EE  E8 00000000 E		call Crlf
 000014F3  BA 000006C6 R		mov  edx,OFFSET lost03
 000014F8  E8 00000000 E	    call WriteString
 000014FD  E8 00000000 E		call Crlf
 00001502  C3				ret
 00001503			draw_lost ENDP

				END main

Microsoft (R) Macro Assembler Version 14.10.25019.0	    12/11/17 17:27:43
game.asm						     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000152E Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00001503 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PlaySound  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
clear_game . . . . . . . . . . .	P Near	 0000057A _TEXT	Length= 0000004E Public STDCALL
draw_copy  . . . . . . . . . . .	P Near	 000009C4 _TEXT	Length= 000001B1 Public STDCALL
draw_game_init . . . . . . . . .	P Near	 00000E26 _TEXT	Length= 00000605 Public STDCALL
draw_game  . . . . . . . . . . .	P Near	 00000B75 _TEXT	Length= 000002B1 Public STDCALL
draw_help  . . . . . . . . . . .	P Near	 00000461 _TEXT	Length= 00000119 Public STDCALL
  helpmenu2  . . . . . . . . . .	L Near	 0000054C _TEXT	
draw_lost  . . . . . . . . . . .	P Near	 0000142B _TEXT	Length= 000000D8 Public STDCALL
draw_menu  . . . . . . . . . . .	P Near	 000002B0 _TEXT	Length= 000001B1 Public STDCALL
  Menu1  . . . . . . . . . . . .	L Near	 0000036D _TEXT	
  Menu2  . . . . . . . . . . . .	L Near	 000003B7 _TEXT	
  exit_draw_menu . . . . . . . .	L Near	 00000401 _TEXT	
draw_obst  . . . . . . . . . . .	P Near	 0000086B _TEXT	Length= 00000159 Public STDCALL
  posicao2 . . . . . . . . . . .	L Near	 000008F1 _TEXT	
  posicao3 . . . . . . . . . . .	L Near	 00000906 _TEXT	
  posicao4 . . . . . . . . . . .	L Near	 0000091B _TEXT	
  draw_final . . . . . . . . . .	L Near	 00000927 _TEXT	
  return_draw  . . . . . . . . .	L Near	 000009B9 _TEXT	
draw_player  . . . . . . . . . .	P Near	 000005C8 _TEXT	Length= 000002A3 Public STDCALL
  pos1 . . . . . . . . . . . . .	L Near	 000006A9 _TEXT	
  pos2 . . . . . . . . . . . . .	L Near	 00000742 _TEXT	
  pos3 . . . . . . . . . . . . .	L Near	 000007D6 _TEXT	
  end_draw . . . . . . . . . . .	L Near	 0000086A _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002B0 Public STDCALL
  Main_Menu  . . . . . . . . . .	L Near	 00000024 _TEXT	
  nextcmp  . . . . . . . . . . .	L Near	 0000006D _TEXT	
  elsecmp  . . . . . . . . . . .	L Near	 00000083 _TEXT	
  exitcmp  . . . . . . . . . . .	L Near	 00000097 _TEXT	
  gameloop_start . . . . . . . .	L Near	 000000A3 _TEXT	
  gameloop_inner . . . . . . . .	L Near	 000000D5 _TEXT	
  elsecmp_g  . . . . . . . . . .	L Near	 0000010B _TEXT	
  exitcmp_g  . . . . . . . . . .	L Near	 0000011F _TEXT	
  finish_counter . . . . . . . .	L Near	 0000016E _TEXT	
  exit_timer . . . . . . . . . .	L Near	 00000178 _TEXT	
  colision2  . . . . . . . . . .	L Near	 0000019F _TEXT	
  colision3  . . . . . . . . . .	L Near	 000001B7 _TEXT	
  colision4  . . . . . . . . . .	L Near	 000001CF _TEXT	
  end_colision . . . . . . . . .	L Near	 000001E7 _TEXT	
  helploop . . . . . . . . . . .	L Near	 00000202 _TEXT	
  second_cmp . . . . . . . . . .	L Near	 00000238 _TEXT	
  third_cmp  . . . . . . . . . .	L Near	 00000258 _TEXT	
  lost_screen  . . . . . . . . .	L Near	 00000278 _TEXT	
  Finish . . . . . . . . . . . .	L Near	 000002A9 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
SND_ALIAS  . . . . . . . . . . .	DWord	 00001507 _DATA	
SND_FILENAME . . . . . . . . . .	DWord	 0000150F _DATA	
SND_RESOURCE . . . . . . . . . .	DWord	 0000150B _DATA	
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
carcontrol . . . . . . . . . . .	Byte	 00000AE2 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
deviceConnect  . . . . . . . . .	Byte	 000014F9 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
file . . . . . . . . . . . . . .	Byte	 00001513 _DATA	
game000  . . . . . . . . . . . .	Byte	 00000708 _DATA	
game001  . . . . . . . . . . . .	Byte	 00000725 _DATA	
game002  . . . . . . . . . . . .	Byte	 00000742 _DATA	
game003  . . . . . . . . . . . .	Byte	 0000075F _DATA	
game004  . . . . . . . . . . . .	Byte	 0000077C _DATA	
game005  . . . . . . . . . . . .	Byte	 00000799 _DATA	
game006  . . . . . . . . . . . .	Byte	 000007B6 _DATA	
game007  . . . . . . . . . . . .	Byte	 000007D3 _DATA	
game008  . . . . . . . . . . . .	Byte	 000007F0 _DATA	
game009  . . . . . . . . . . . .	Byte	 0000080D _DATA	
game010  . . . . . . . . . . . .	Byte	 0000082A _DATA	
game011  . . . . . . . . . . . .	Byte	 00000847 _DATA	
game012  . . . . . . . . . . . .	Byte	 00000864 _DATA	
game013  . . . . . . . . . . . .	Byte	 00000881 _DATA	
game014  . . . . . . . . . . . .	Byte	 0000089E _DATA	
game015  . . . . . . . . . . . .	Byte	 000008BB _DATA	
game016  . . . . . . . . . . . .	Byte	 000008D8 _DATA	
game017  . . . . . . . . . . . .	Byte	 000008F5 _DATA	
game018  . . . . . . . . . . . .	Byte	 00000912 _DATA	
game019  . . . . . . . . . . . .	Byte	 0000092F _DATA	
game020  . . . . . . . . . . . .	Byte	 0000094C _DATA	
game021  . . . . . . . . . . . .	Byte	 00000969 _DATA	
game022  . . . . . . . . . . . .	Byte	 00000986 _DATA	
game023  . . . . . . . . . . . .	Byte	 000009A3 _DATA	
game024  . . . . . . . . . . . .	Byte	 000009C0 _DATA	
game025  . . . . . . . . . . . .	Byte	 000009DD _DATA	
game026  . . . . . . . . . . . .	Byte	 000009FA _DATA	
game027  . . . . . . . . . . . .	Byte	 00000A17 _DATA	
game028  . . . . . . . . . . . .	Byte	 00000A34 _DATA	
game029  . . . . . . . . . . . .	Byte	 00000A51 _DATA	
game030  . . . . . . . . . . . .	Byte	 00000A6E _DATA	
game031  . . . . . . . . . . . .	Byte	 00000A8B _DATA	
game032  . . . . . . . . . . . .	Byte	 00000AA8 _DATA	
game033  . . . . . . . . . . . .	Byte	 00000AC5 _DATA	
game0  . . . . . . . . . . . . .	Byte	 00000B03 _DATA	
game100  . . . . . . . . . . . .	Byte	 00000BAB _DATA	
game101  . . . . . . . . . . . .	Byte	 00000BD5 _DATA	
game102  . . . . . . . . . . . .	Byte	 00000BFF _DATA	
game103  . . . . . . . . . . . .	Byte	 00000C29 _DATA	
game104  . . . . . . . . . . . .	Byte	 00000C53 _DATA	
game105  . . . . . . . . . . . .	Byte	 00000C7D _DATA	
game106  . . . . . . . . . . . .	Byte	 00000CA7 _DATA	
game107  . . . . . . . . . . . .	Byte	 00000CD1 _DATA	
game108  . . . . . . . . . . . .	Byte	 00000CFB _DATA	
game109  . . . . . . . . . . . .	Byte	 00000D25 _DATA	
game110  . . . . . . . . . . . .	Byte	 00000D4F _DATA	
game111  . . . . . . . . . . . .	Byte	 00000D79 _DATA	
game112  . . . . . . . . . . . .	Byte	 00000DA3 _DATA	
game113  . . . . . . . . . . . .	Byte	 00000DCD _DATA	
game114  . . . . . . . . . . . .	Byte	 00000DF7 _DATA	
game115  . . . . . . . . . . . .	Byte	 00000E21 _DATA	
game116  . . . . . . . . . . . .	Byte	 00000E4B _DATA	
game117  . . . . . . . . . . . .	Byte	 00000E75 _DATA	
game118  . . . . . . . . . . . .	Byte	 00000E9F _DATA	
game119  . . . . . . . . . . . .	Byte	 00000EC9 _DATA	
game120  . . . . . . . . . . . .	Byte	 00000EF3 _DATA	
game121  . . . . . . . . . . . .	Byte	 00000F1D _DATA	
game122  . . . . . . . . . . . .	Byte	 00000F47 _DATA	
game123  . . . . . . . . . . . .	Byte	 00000F71 _DATA	
game124  . . . . . . . . . . . .	Byte	 00000F9B _DATA	
game125  . . . . . . . . . . . .	Byte	 00000FC5 _DATA	
game126  . . . . . . . . . . . .	Byte	 00000FEF _DATA	
game127  . . . . . . . . . . . .	Byte	 00001019 _DATA	
game128  . . . . . . . . . . . .	Byte	 00001043 _DATA	
game129  . . . . . . . . . . . .	Byte	 0000106D _DATA	
game130  . . . . . . . . . . . .	Byte	 00001097 _DATA	
game131  . . . . . . . . . . . .	Byte	 000010C1 _DATA	
game132  . . . . . . . . . . . .	Byte	 000010EB _DATA	
game133  . . . . . . . . . . . .	Byte	 00001115 _DATA	
game1  . . . . . . . . . . . . .	Byte	 00000B2D _DATA	
game200  . . . . . . . . . . . .	Byte	 0000113F _DATA	
game201  . . . . . . . . . . . .	Byte	 0000115C _DATA	
game202  . . . . . . . . . . . .	Byte	 00001179 _DATA	
game203  . . . . . . . . . . . .	Byte	 00001196 _DATA	
game204  . . . . . . . . . . . .	Byte	 000011B3 _DATA	
game205  . . . . . . . . . . . .	Byte	 000011D0 _DATA	
game206  . . . . . . . . . . . .	Byte	 000011ED _DATA	
game207  . . . . . . . . . . . .	Byte	 0000120A _DATA	
game208  . . . . . . . . . . . .	Byte	 00001227 _DATA	
game209  . . . . . . . . . . . .	Byte	 00001244 _DATA	
game210  . . . . . . . . . . . .	Byte	 00001261 _DATA	
game211  . . . . . . . . . . . .	Byte	 0000127E _DATA	
game212  . . . . . . . . . . . .	Byte	 0000129B _DATA	
game213  . . . . . . . . . . . .	Byte	 000012B8 _DATA	
game214  . . . . . . . . . . . .	Byte	 000012D5 _DATA	
game215  . . . . . . . . . . . .	Byte	 000012F2 _DATA	
game216  . . . . . . . . . . . .	Byte	 0000130F _DATA	
game217  . . . . . . . . . . . .	Byte	 0000132C _DATA	
game218  . . . . . . . . . . . .	Byte	 00001349 _DATA	
game219  . . . . . . . . . . . .	Byte	 00001366 _DATA	
game220  . . . . . . . . . . . .	Byte	 00001383 _DATA	
game221  . . . . . . . . . . . .	Byte	 000013A0 _DATA	
game222  . . . . . . . . . . . .	Byte	 000013BD _DATA	
game223  . . . . . . . . . . . .	Byte	 000013DA _DATA	
game224  . . . . . . . . . . . .	Byte	 000013F7 _DATA	
game225  . . . . . . . . . . . .	Byte	 00001414 _DATA	
game226  . . . . . . . . . . . .	Byte	 00001431 _DATA	
game227  . . . . . . . . . . . .	Byte	 0000144E _DATA	
game228  . . . . . . . . . . . .	Byte	 0000146B _DATA	
game229  . . . . . . . . . . . .	Byte	 00001488 _DATA	
game230  . . . . . . . . . . . .	Byte	 000014A5 _DATA	
game231  . . . . . . . . . . . .	Byte	 000014C2 _DATA	
game232  . . . . . . . . . . . .	Byte	 000014CF _DATA	
game233  . . . . . . . . . . . .	Byte	 000014DC _DATA	
game2  . . . . . . . . . . . . .	Byte	 00000B57 _DATA	
game3  . . . . . . . . . . . . .	Byte	 00000B81 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
help00 . . . . . . . . . . . . .	Byte	 00000422 _DATA	
help01 . . . . . . . . . . . . .	Byte	 00000464 _DATA	
help02 . . . . . . . . . . . . .	Byte	 000004A6 _DATA	
help03 . . . . . . . . . . . . .	Byte	 000004E8 _DATA	
help04h  . . . . . . . . . . . .	Byte	 0000056C _DATA	
help04 . . . . . . . . . . . . .	Byte	 0000052A _DATA	
help05h  . . . . . . . . . . . .	Byte	 000005F0 _DATA	
help05 . . . . . . . . . . . . .	Byte	 000005AE _DATA	
helpindex  . . . . . . . . . . .	Byte	 00000421 _DATA	
level_counter  . . . . . . . . .	DWord	 00000AFB _DATA	
level_timer  . . . . . . . . . .	DWord	 00000AFF _DATA	
level  . . . . . . . . . . . . .	DWord	 00000AF7 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lost00 . . . . . . . . . . . . .	Byte	 00000632 _DATA	
lost01 . . . . . . . . . . . . .	Byte	 00000674 _DATA	
lost02 . . . . . . . . . . . . .	Byte	 0000069D _DATA	
lost03 . . . . . . . . . . . . .	Byte	 000006C6 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
menu01 . . . . . . . . . . . . .	Byte	 00000001 _DATA	
menu02 . . . . . . . . . . . . .	Byte	 00000043 _DATA	
menu03 . . . . . . . . . . . . .	Byte	 00000085 _DATA	
menu04 . . . . . . . . . . . . .	Byte	 000000C7 _DATA	
menu05 . . . . . . . . . . . . .	Byte	 00000109 _DATA	
menu06h  . . . . . . . . . . . .	Byte	 0000018D _DATA	
menu06 . . . . . . . . . . . . .	Byte	 0000014B _DATA	
menu07h  . . . . . . . . . . . .	Byte	 00000211 _DATA	
menu07 . . . . . . . . . . . . .	Byte	 000001CF _DATA	
menu08h  . . . . . . . . . . . .	Byte	 00000295 _DATA	
menu08 . . . . . . . . . . . . .	Byte	 00000253 _DATA	
menu09 . . . . . . . . . . . . .	Byte	 000002D7 _DATA	
menu10 . . . . . . . . . . . . .	Byte	 00000319 _DATA	
menu11 . . . . . . . . . . . . .	Byte	 0000035B _DATA	
menu12 . . . . . . . . . . . . .	Byte	 0000039D _DATA	
menu13 . . . . . . . . . . . . .	Byte	 000003DF _DATA	
menuctrl . . . . . . . . . . . .	Byte	 00000000 _DATA	
obstaculo_counter  . . . . . . .	DWord	 00000AEB _DATA	
obstaculo_index  . . . . . . . .	DWord	 00000AE7 _DATA	
random_number  . . . . . . . . .	DWord	 00000AE3 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
score  . . . . . . . . . . . . .	DWord	 00000AF3 _DATA	
timer_obst . . . . . . . . . . .	DWord	 00000AEF _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
